<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[ヨセミテ国立公園へ行きたい。]]></title>
  <subtitle><![CDATA[Webまわりのいろいろなことを試してそれを公開してみるページ]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://camberbridge.github.io//"/>
  <updated>2015-09-25T13:37:19.000Z</updated>
  <id>http://camberbridge.github.io//</id>
  
  <author>
    <name><![CDATA[UEC_Abe]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[アドオンスクリプトから外部WebAPIをたたく]]></title>
    <link href="http://camberbridge.github.io/2015/09/25/%E3%82%A2%E3%83%89%E3%82%AA%E3%83%B3%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%81%8B%E3%82%89%E5%A4%96%E9%83%A8WebAPI%E3%82%92%E3%81%9F%E3%81%9F%E3%81%8F/"/>
    <id>http://camberbridge.github.io/2015/09/25/アドオンスクリプトから外部WebAPIをたたく/</id>
    <published>2015-09-25T13:13:06.000Z</published>
    <updated>2015-09-25T13:37:19.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li>Firefox Add-on のアドオンスクリプトから外部WebAPIをたたくには(クロスドメイン制約やらの問題を配慮して)XMLHTTPRequestではHTTP通信ができなくなっている.<br>– XMLHTTPRequestがラッパされているAdd-on SDK提供のrequestモジュールを使えばHTTP通信ができる. 下記例.</li>
</ul>
<figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var <span class="built_in">Request</span> = require(<span class="string">"sdk/request"</span>).<span class="built_in">Request</span>;</span><br><span class="line">var quijote = <span class="built_in">Request</span>(&#123;</span><br><span class="line">  url: <span class="string">"URL"</span>,</span><br><span class="line">  overrideMimeType: <span class="string">"text/plain; charset=latin1"</span>,</span><br><span class="line">  onComplete: <span class="keyword">function</span> (<span class="built_in">response</span>) &#123;</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="built_in">response</span>.text);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">quijote.<span class="keyword">get</span>();</span><br></pre></td></tr></table></figure>
<p>– ちなみにレスポンスで受ける文字列が化けるのでcharsetはutf-8にするといい</p>
]]></content>
    <summary type="html">
    <![CDATA[<ul>
<li>Firefox Add-on のアドオンスクリプトから外部WebAPIをたたくには(クロスドメイン制約やらの問題を配慮して)XMLHTTPRequestではHTTP通信ができなくなっている.<br>– XMLHTTPRequestがラッパされているAdd-on ]]>
    </summary>
    
      <category term="WebAPI" scheme="http://camberbridge.github.io/tags/WebAPI/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[FirefoxAdd-onの開発着手]]></title>
    <link href="http://camberbridge.github.io/2015/08/14/FirefoxAdd-on%E3%81%AE%E9%96%8B%E7%99%BA%E7%9D%80%E6%89%8B/"/>
    <id>http://camberbridge.github.io/2015/08/14/FirefoxAdd-onの開発着手/</id>
    <published>2015-08-14T07:54:48.000Z</published>
    <updated>2015-08-14T08:19:50.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li>Widgetモジュールの使用は非推奨となっていた<br>– uiモジュールを使うように</li>
<li>モジュールのパス指定はsdk/から始めるように(省略すると実行時にwarningが出る)</li>
</ul>
<p>下記はブラウザのメニューバーにアイコンを追加し, それをクリックすると新しいタブを開いてモジラのページへジャンプするコード<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> buttons = <span class="built_in">require</span>(<span class="string">'sdk/ui/button/action'</span>);</span><br><span class="line"><span class="keyword">var</span> tabs = <span class="built_in">require</span>(<span class="string">"sdk/tabs"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> button = buttons.ActionButton(&#123;</span><br><span class="line">  id: <span class="string">"mozilla-link"</span>,</span><br><span class="line">  label: <span class="string">"Visit Mozilla"</span>,</span><br><span class="line">  icon: &#123;</span><br><span class="line">    <span class="string">"16"</span>: <span class="string">"./icon-16.png"</span>,</span><br><span class="line">    <span class="string">"32"</span>: <span class="string">"./icon-32.png"</span>,</span><br><span class="line">    <span class="string">"64"</span>: <span class="string">"./icon-64.png"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onClick: handleClick</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line">  tabs.open(<span class="string">"https://www.mozilla.org/"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<ul>
<li>Widgetモジュールの使用は非推奨となっていた<br>– uiモジュールを使うように</li>
<li>モジュールのパス指定はsdk/から始めるように(省略すると実行時にwarningが出る)</li>
</ul>
<p>下記はブラウザのメニューバーにアイコン]]>
    </summary>
    
      <category term="アドオン" scheme="http://camberbridge.github.io/tags/%E3%82%A2%E3%83%89%E3%82%AA%E3%83%B3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Three.jsを使ってみた]]></title>
    <link href="http://camberbridge.github.io/2015/08/10/Three-js%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F/"/>
    <id>http://camberbridge.github.io/2015/08/10/Three-jsを使ってみた/</id>
    <published>2015-08-10T06:24:40.000Z</published>
    <updated>2015-08-11T03:37:03.000Z</updated>
    <content type="html"><![CDATA[<ul><br>  <li>Three.jsとは<br>    WebGLをサポートした3次元CGを描画するためのライブラリ<br>    取得は<a href="https://github.com/mrdoob/three.js/" target="_blank" rel="external">ここ</a><br>  </li><br>  <li>参考<br>    <ul><br>      <li><a href="http://threejs.org/docs/" target="_blank" rel="external">three.js/docs</a></li><br>      <li><a href="http://www.yomotsu.net/wp/?p=597" target="_blank" rel="external">THREE.jsでWebGL</a></li><br>    </ul><br>  </li><br></ul>

<p></p><h3 id="exe-result">実行結果</h3><p></p>
<script>
window.addEventListener("DOMContentLoaded",function(){
    //表示領域の確保(HTMLに)
    var width = "300px";
    var height = "300px";
    var container = document.createElement("div");
    //h3内にdiv生成
    document.getElementById("exe-result").appendChild(container);
    container.style.width = width;
    container.style.height = height;

    //レンダラ生成
    var cWidth = container.offsetWidth;
    var cHeight = container.offsetHeight;
    var renderer = new THREE.WebGLRenderer({alpha: true, antialias: true});
    renderer.setSize(cWidth, cHeight);
    renderer.setClearColor(0xffffff, 1);
    //生成したdiv内にレンダラが持つDOM要素を追加
    container.appendChild(renderer.domElement);

    //シーン生成
    var scene = new THREE.Scene();

    //カメラ生成
    var angle = 20;
    var near = 1;
    var far = 10000;
    var aspect = cWidth/cHeight;
    var camera = new THREE.PerspectiveCamera(angle, aspect, near, far);
    camera.position.set(0, 500, 1000);
    camera.lookAt({x:0, y:0, z:0});

    //表示する物体生成
    var geometry = new THREE.SphereGeometry(150, 20, 20);
    var material = new THREE.MeshBasicMaterial({color: 0x0000ff, wireframe: true});
    var mesh = new THREE.Mesh(geometry, material);

    //シーンに物体追加
    scene.add(mesh);

    //レンダリング
    renderer.render(scene, camera);

    //アニメーション
    var theta = 0;
    var rgbR = 0, rgbG = 0, rgbB = 0;
    var evalR = true, evalG = true, evalB = true;
    var rotate = function(){
        theta += 0.01;
        theta %= 2 * Math.PI;
        mesh.rotation.y = theta;
    if(evalR == true){
      rgbR += 0.01;
    }else if(evalR == false){
      rgbR -= 0.01;
    }
        if(rgbR == 1){
          evalR = false;
        }else if(rgbR == 0){
      evalR = true;
    }
        if(evalG == true){
          rgbG += 0.02;
        }else if(evalG == false){
          rgbG -= 0.02;
        }
        if(rgbG >= 1){
          evalG = false;
        }else if(rgbG <= 0){
          evalG = true;
        }
        if(evalB == true){
          rgbB += 0.03;
        }else if(evalB == false){
          rgbB -= 0.03;
        }
        if(rgbB >= 1){
          evalB = false;
        }else if(rgbB <= 0){
          evalB = true;
        }
        material.color.setRGB(rgbR, rgbG, rgbB);
        renderer.render(scene, camera);
        requestAnimationFrame(rotate);
    };
    rotate();
});
</script>
]]></content>
    <summary type="html">
    <![CDATA[<ul><br>  <li>Three.jsとは<br>    WebGLをサポートした3次元CGを描画するためのライブラリ<br>    取得は<a href="https://github.com/mrdoob/three.js/" target="_blank" rel="]]>
    </summary>
    
      <category term="Three.js" scheme="http://camberbridge.github.io/tags/Three-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo始めた]]></title>
    <link href="http://camberbridge.github.io/2015/08/09/Hexo%E5%A7%8B%E3%82%81%E3%81%9F/"/>
    <id>http://camberbridge.github.io/2015/08/09/Hexo始めた/</id>
    <published>2015-08-09T09:46:00.000Z</published>
    <updated>2015-08-10T03:13:26.000Z</updated>
    <content type="html"><![CDATA[<ul><br>  <li>hexoとは<br>  静的サイトジェネレータの1つ<br>  読み方分からん<br>  </li><br>  <li>シンタックス<br>  <a href="http://qiita.com" target="_blank" rel="external">Qiita</a>のようにシンタックスハイライトされる<br>  </li><br>  <li>手順<br>    <ol><br>      <li> ブログ生成<br>      <code>$ hexo new “hoge”</code><br>      source/_posts 配下に .md ファイルが生成される<br>      </li><br>      <li>ローカル環境でサーバ起動して確認<br>      <code>$ hexo server</code><br>      </li><br>      <li>デプロイ<br>      <code>$ hexo deploy -g</code><br>      これは generate の役目も担う<br>      </li><br>    </ol><br>  </li><br></ul>
]]></content>
    <summary type="html">
    <![CDATA[<ul><br>  <li>hexoとは<br>  静的サイトジェネレータの1つ<br>  読み方分からん<br>  </li><br>  <li>シンタックス<br>  <a href="http://qiita.com" target="_blank" rel="extern]]>
    </summary>
    
      <category term="hexo" scheme="http://camberbridge.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>