<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[キャンベルとヨセミテ]]></title>
  <subtitle><![CDATA[Webまわりのいろいろなことを試してそれを公開してみるページ]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="https://camberbridge.github.io//"/>
  <updated>2019-12-16T15:47:53.000Z</updated>
  <id>https://camberbridge.github.io//</id>
  
  <author>
    <name><![CDATA[UEC_Abe]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Min HashによるJaccard係数の近似実験]]></title>
    <link href="https://camberbridge.github.io/2016/10/05/Min-Hash%E3%81%AB%E3%82%88%E3%82%8BJaccard%E4%BF%82%E6%95%B0%E3%81%AE%E8%BF%91%E4%BC%BC%E5%AE%9F%E9%A8%93/"/>
    <id>https://camberbridge.github.io/2016/10/05/Min-HashによるJaccard係数の近似実験/</id>
    <published>2016-10-04T15:00:00.000Z</published>
    <updated>2019-12-16T15:47:53.000Z</updated>
    <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>Jaccard係数は集合間の類似度を表す尺度(値域は0から1の間)であり, (1)式により定義されます(値が1に近づくほど類似度が高い). </p>
<p>$sim(C_i, C_j) = \frac{\mid C_i \cap C_j \mid}{\mid C_i \cup C_j \mid}$  ・・・(1)</p>
<p>一般に, (1)式はDBの中からクエリqとのJaccard係数が大きいデータ(集合)を探すような場合に, データ数nやデータの要素数dが大きいと計算時間($O(nd)$)が非常に大きくなる問題があります${}^{※1}$.<br>そこで今回は, 集合に対する確率的なハッシュ関数であるMin Hashを用いて, Jaccard係数を近似計算する実験を行ってみます. Min HashはJaccard係数に対する<a href="https://ja.wikipedia.org/wiki/%E5%B1%80%E6%89%80%E6%80%A7%E9%8B%AD%E6%95%8F%E5%9E%8B%E3%83%8F%E3%83%83%E3%82%B7%E3%83%A5" target="_blank" rel="noopener">Locality Sensitive Hashing</a>です.<br>※1 扱うデータはそれぞれ要素の種類数を次元とした2値ベクトル表現に変換しているとします. </p>
<h3 id="Jaccard係数の性質"><a href="#Jaccard係数の性質" class="headerlink" title="Jaccard係数の性質"></a>Jaccard係数の性質</h3><p>2つのベクトル$C_i = (1, 1, 0, 0)$, $C_j = (1, 0, 1, 0)$があるとします. </p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">タイプA</th>
<th align="center">タイプB</th>
<th align="center">タイプC</th>
<th align="center">タイプD</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$C_{i}$</td>
<td align="center">1</td>
<td align="center">1</td>
<td align="center">0</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">$C_{j}$</td>
<td align="center">1</td>
<td align="center">0</td>
<td align="center">1</td>
<td align="center">0</td>
</tr>
</tbody></table>
<p>このとき各列は値によって4種類に分類でき, タイプDはJaccard係数に関係ないので, $C_i$, $C_j$間の類似度は(2)式で表現できます. </p>
<p>$sim(C_i, C_j) = \frac{\mid A \mid}{\mid A \mid + \mid B \mid + \mid C \mid}$　・・・(2)</p>
<h3 id="Min-Hashの性質"><a href="#Min-Hashの性質" class="headerlink" title="Min Hashの性質"></a>Min Hashの性質</h3><p>Min Hashは, ベクトルの列入れ替え規則を持ったハッシュ関数mhをそれぞれのベクトルに適用した後, 最初に非ゼロが出現する位置(ハッシュ値)が一致する確率によってJaccard係数を近似する手法です. したがって, ベクトルの列をランダムに入れ替えたときにタイプA, B, Cのどれが最初に出現するかでハッシュ値が一致するかどうかが決まるため, 結局タイプDは関係なく, (3)式で表現されます. </p>
<p>$P[mh(C_i) = mh(C_j)] = \frac{\mid A \mid}{\mid A \mid + \mid B \mid + \mid C \mid}$　・・・(3)</p>
<p>なお, 実際にMin Hashを使うときはベクトルの列を入れ替えることはせずにランダムに生成したハッシュテーブル$r_{(t)}$を用意し, ハッシュテーブルを通してハッシュ値を求めます(データベースで列の入れ替えは処理が重いため). </p>
<p>例：$r_{(t)} = $ {$6, 1, 2, 3, 8, 7, 5, 4$}, $C_i = (1, 0, 0, 0, 1, 1, 1, 0)$のとき, $mh(C_i) = min${$6, 8, 7, 5$} $ = 5$</p>
<p>つまりMin Hashは作成したハッシュ関数(ハッシュテーブル$r_{(t)}$)をそれぞれの集合に適用した後に最小値を求め, それが一致する確率でJaccard係数を近似します. ハッシュ値が一致する確率は経験確率により近似計算します. 具体的には, </p>
<ol>
<li>k個のハッシュ関数を用意し, $C_i$, $C_j$に対するk個のハッシュ値${}^{※2}$を得る</li>
<li>$C_i$, $C_j$のk個のハッシュ値のうち, いくつが一致するか数える</li>
<li>一致した数をkで割った確率がJaccard係数の近似値となる</li>
</ol>
<p>kの数を増やせば増やすほど, 近似値はJaccard係数に近づきます.<br>※2 k個のハッシュ値はsketchとも呼ばれます.</p>
<h3 id="重要な定理"><a href="#重要な定理" class="headerlink" title="重要な定理"></a>重要な定理</h3><p>ここで重要な定理は, $C_i$, $C_j$のハッシュ値が一致する確率はJaccard係数と等しいということです. </p>
<p>$P[mh(C_i) = mh(C_j)] = \frac{\mid C_i \cap C_j \mid}{\mid C_i \cup C_j \mid} = sim(C_i, C_j)$　・・・(4)</p>
<hr>
<h2 id="方針"><a href="#方針" class="headerlink" title="方針"></a>方針</h2><ul>
<li>DBの中からクエリの類似データを検索するタスクを用意します</li>
<li>Jaccard係数とMin Hashによる近似Jaccard係数を用いて類似データを検索します</li>
<li>Jaccard係数での検索結果を正解データとして, 近似Jaccard係数での検索結果で<a href="http://scikit-learn.org/stable/auto_examples/model_selection/plot_precision_recall.html" target="_blank" rel="noopener">Precision Recall Curve</a>を作成します</li>
<li>kを増やすほどJaccard係数による検索結果に近づくのか, カーブの下がり具合を見て確かめます(カーブの右肩が座標(1, 1)に近いほど, Min Hashによる近似値はJaccard係数に近い)</li>
</ul>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ol>
<li>150個の集合をランダムに生成する<ul>
<li>集合の要素種類数を400とし, 各要素を含むかどうかは確率的に決定する</li>
</ul>
</li>
<li>集合の20%をクエリ, 80%をDBとする</li>
<li>クエリとのJaccard係数が大きい上位20個の集合を正解データとする</li>
<li>近似Jaccard係数による検索結果の上位100個について, Precision Recall Curveを作成する(ハッシュ値の数k = 100, 1000, 10000の場合について)<ul>
<li>$Precision = \frac{近似Jaccard係数による検索結果上位x個のうち正解データに入っているものの数}{検索結果件数x}$</li>
<li>$Recall = \frac{近似Jaccard係数による検索結果上位x個のうち正解データに入っているものの数}{正解データ数}$</li>
<li>変数$x$は1~100</li>
</ul>
</li>
</ol>
<h2 id="実装"><a href="#実装" class="headerlink" title="実装"></a>実装</h2><h3 id="Jaccard係数とMin-Hashの実装"><a href="#Jaccard係数とMin-Hashの実装" class="headerlink" title="Jaccard係数とMin Hashの実装"></a>Jaccard係数とMin Hashの実装</h3><ol>
<li><p>Jaccard係数とMin Hashを実装します. すべての集合を2値ベクトル表現にし, プログラムの実行時に引数でsketchの数kを指定できるようにしました. </p>
<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="attr">from</span> <span class="string">abc import ABCMeta, abstractmethod</span></span><br><span class="line"><span class="attr">import</span> <span class="string">random</span></span><br><span class="line"><span class="attr">import</span> <span class="string">sys</span></span><br><span class="line"><span class="attr">import</span> <span class="string">math</span></span><br><span class="line"></span><br><span class="line"><span class="attr">class</span> <span class="string">SimilarityCal(object):</span></span><br><span class="line">    <span class="attr">__metaclass__</span> = <span class="string">ABCMeta</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">@abstractmethod</span></span><br><span class="line">    <span class="attr">def</span> <span class="string">calculate(self, set_x, set_y):</span></span><br><span class="line">        <span class="attr">raise</span> <span class="string">NotImplementedError("not implemented error.")</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">    # 重複要素のない集合の生成</span></span><br><span class="line">    <span class="attr">def</span> <span class="string">uniqueSet(self, set_x, set_y):</span></span><br><span class="line">        <span class="attr">x</span> = <span class="string">set(list(set_x))</span></span><br><span class="line">        <span class="attr">y</span> = <span class="string">set(list(set_y))</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">return</span> <span class="string">x, y</span></span><br><span class="line"></span><br><span class="line"><span class="comment">    # 2値ベクトルの生成</span></span><br><span class="line">    <span class="attr">def</span> <span class="string">binaryVector(self, set_x, set_y):</span></span><br><span class="line"><span class="comment">        # 集合の要素種類数</span></span><br><span class="line">        <span class="attr">set_xy</span> =  <span class="string">set(list(set_x)) | set(list(set_y))</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">x</span> = <span class="string">[]</span></span><br><span class="line">        <span class="attr">y</span> = <span class="string">[]</span></span><br><span class="line">        </span><br><span class="line">        <span class="attr">for</span> <span class="string">v in set_xy:</span></span><br><span class="line">            <span class="attr">if</span> <span class="string">v in set_x:</span></span><br><span class="line">                <span class="attr">x.append(1)</span></span><br><span class="line">            <span class="attr">else</span>:<span class="string"></span></span><br><span class="line">                <span class="attr">x.append(0)</span></span><br><span class="line"></span><br><span class="line">            <span class="attr">if</span> <span class="string">v in set_y:</span></span><br><span class="line">                <span class="attr">y.append(1)</span></span><br><span class="line">            <span class="attr">else</span>:<span class="string"></span></span><br><span class="line">                <span class="attr">y.append(0)</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">return</span> <span class="string">x, y</span></span><br><span class="line"></span><br><span class="line"><span class="comment">    # 1~引数lengthの範囲で重複なしの乱数を引数length分生成 (length = 集合の要素種類数)</span></span><br><span class="line">    <span class="attr">def</span> <span class="string">generateRanNum(self, length):</span></span><br><span class="line">        <span class="attr">samples</span> = <span class="string">random.sample(xrange(length + 1), length + 1)</span></span><br><span class="line">        <span class="attr">r_t</span> = <span class="string">[]</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">for</span> <span class="string">v in samples:</span></span><br><span class="line">            <span class="attr">if</span> <span class="string">v != 0 and len(r_t) &lt; length:</span></span><br><span class="line">                <span class="attr">r_t.append(v)</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">return</span> <span class="string">r_t</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Jaccard係数</span></span><br><span class="line"><span class="attr">class</span> <span class="string">Jaccard(SimilarityCal):</span></span><br><span class="line">    <span class="attr">def</span> <span class="string">calculate(self, set_x, set_y):</span></span><br><span class="line">        <span class="meta">x,</span> <span class="string">y = self.uniqueSet(set_x, set_y)</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">try</span>:<span class="string"></span></span><br><span class="line"><span class="comment">            # 積集合/和集合</span></span><br><span class="line">            <span class="attr">result</span> = <span class="string">float(len(x &amp; y)) / len(x | y)</span></span><br><span class="line">        <span class="attr">except</span> <span class="string">ZeroDivisionError:</span></span><br><span class="line">            <span class="attr">result</span> = <span class="string">0.0</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">return</span> <span class="string">result</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MinHash</span></span><br><span class="line"><span class="attr">class</span> <span class="string">MinHash(SimilarityCal):</span></span><br><span class="line">    <span class="attr">def</span> <span class="string">calculate(self, set_x, set_y):</span></span><br><span class="line">        <span class="meta">bagOfX,</span> <span class="string">bagOfY = self.binaryVector(set_x, set_y)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">        # 生成するMinHashの数</span></span><br><span class="line">        <span class="attr">k</span> = <span class="string">int(sys.argv[1])</span></span><br><span class="line"><span class="comment">        # k個のハッシュ値のうち, いくつ一致したか</span></span><br><span class="line">        <span class="attr">counter</span> = <span class="string">0</span></span><br><span class="line"><span class="comment">        # 第一引数kの回数分ハッシュ関数を生成し, 比較する</span></span><br><span class="line">        <span class="attr">for</span> <span class="string">i in xrange(k):</span></span><br><span class="line">            <span class="attr">hashX</span> = <span class="string">[]</span></span><br><span class="line">            <span class="attr">hashY</span> = <span class="string">[]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">            # r(t)テーブルの生成</span></span><br><span class="line">            <span class="attr">r_t</span> = <span class="string">self.generateRanNum(len(bagOfX))</span></span><br><span class="line"></span><br><span class="line">            <span class="attr">for</span> <span class="string">i in xrange(len(bagOfX)):</span></span><br><span class="line">                <span class="attr">if</span> <span class="string">bagOfX[i] == 1:</span></span><br><span class="line">                    <span class="attr">hashX.append(r_t[i])</span></span><br><span class="line">            <span class="attr">mh_x</span> = <span class="string">min(hashX)</span></span><br><span class="line"></span><br><span class="line">            <span class="attr">for</span> <span class="string">i in xrange(len(bagOfY)):</span></span><br><span class="line">                <span class="attr">if</span> <span class="string">bagOfY[i] == 1:</span></span><br><span class="line">                    <span class="attr">hashY.append(r_t[i])</span></span><br><span class="line">            <span class="attr">mh_y</span> = <span class="string">min(hashY)</span></span><br><span class="line"></span><br><span class="line">            <span class="attr">counter</span> = <span class="string">counter + 1 if mh_x == mh_y else counter</span></span><br><span class="line"></span><br><span class="line"><span class="comment">        # MinHashを用いたJaccard係数の近似計算の結果を返す</span></span><br><span class="line">        <span class="attr">return</span> <span class="string">float(counter) / k</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">if</span> <span class="string">__name__ == '__main__':</span></span><br><span class="line">    <span class="attr">set_x</span> = <span class="string">[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 111, 555, 31, 49, 100, 1000, 1111, 111]</span></span><br><span class="line">    <span class="attr">set_y</span> = <span class="string">[2, 3, 4, 6, 11, 22, 33, 44, 55, 111, 1111, 1000, 100, 10]</span></span><br><span class="line">    <span class="attr">print</span> <span class="string">"MinHash", MinHash().calculate(set_x, set_y)</span></span><br><span class="line">    <span class="attr">print</span> <span class="string">"Jaccard", Jaccard().calculate(set_x, set_y)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>それではハッシュ値の数k = 5で実行してみます. なお, まとめたコードは<a href="https://github.com/camberbridge/camberbridge.github.io/blob/master/assets/sources/jaccard_minhash.py" target="_blank" rel="noopener">GitHub</a>にあげています. </p>
<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ python jaccard_minhash.py <span class="number">5</span></span><br><span class="line">MinHash <span class="number">0.2</span></span><br><span class="line">Jaccard <span class="number">0.409090909091</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>次はk = 7で実行. </p>
<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python jaccard_minhash.py <span class="number">7</span></span><br><span class="line">MinHash <span class="number">0.571428571429</span></span><br><span class="line">Jaccard <span class="number">0.409090909091</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>k = 10で実行. kを増やすとMinHashによる近似Jaccard係数がJaccard係数に近づいていることが確認できます. </p>
<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ python jaccard_minhash.py <span class="number">10</span></span><br><span class="line">MinHash <span class="number">0.4</span></span><br><span class="line">Jaccard <span class="number">0.409090909091</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="Precision-Recall-Curveを描画"><a href="#Precision-Recall-Curveを描画" class="headerlink" title="Precision Recall Curveを描画"></a>Precision Recall Curveを描画</h3><ol>
<li><p>データセットを生成します. 具体的には, 150個の集合をランダムに生成します. そして各集合の要素種類数を400とし, 各要素を含むかどうかは確率的に決定します. 用意したデータセットの20%をクエリ, 80%をDBとします.</p>
<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sketchの個数</span></span><br><span class="line"><span class="attr">kNum</span> = <span class="string">100</span></span><br><span class="line"><span class="comment"># 集合の個数</span></span><br><span class="line"><span class="attr">n</span> = <span class="string">150</span></span><br><span class="line"><span class="comment"># n個の集合</span></span><br><span class="line"><span class="attr">sets</span> = <span class="string">[]</span></span><br><span class="line"><span class="comment"># 要素の値域を[1, 400]つまり要素の種類数dを400にする</span></span><br><span class="line"><span class="attr">d</span> = <span class="string">400</span></span><br><span class="line"><span class="comment"># 集合の要素数を確率的に決める</span></span><br><span class="line"><span class="attr">prob</span> = <span class="string">0.3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># n個の集合を生成</span></span><br><span class="line"><span class="attr">for</span> <span class="string">i in xrange(n):</span></span><br><span class="line">    <span class="attr">ary</span> = <span class="string">[v for v in xrange(1, d + 1) if random.random() &lt; prob]</span></span><br><span class="line">    <span class="attr">sets.append(ary)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># setsのうち20%をクエリ, 80%をDBにする</span></span><br><span class="line"><span class="attr">pivot</span> = <span class="string">int(math.ceil(len(sets)*0.2))</span></span><br><span class="line"><span class="attr">query</span> = <span class="string">sets[:pivot]</span></span><br><span class="line"><span class="attr">db</span> = <span class="string">sets[pivot:]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Jaccard係数が大きい上位20個の集合を正解データとします.</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># クエリとDBのJaccard係数を計算して値の昇順にソート</span></span><br><span class="line"><span class="attr">aryJaccard</span> = []</span><br><span class="line">for set_x <span class="keyword">in</span> query:</span><br><span class="line">    for set_y <span class="keyword">in</span> db:</span><br><span class="line">        <span class="attr">dictJaccard</span> = &#123;&#125;</span><br><span class="line">        dictJaccard[<span class="string">"Set"</span>] = set_y</span><br><span class="line">        dictJaccard[<span class="string">"Score"</span>] = Jaccard().calculate(set_x, set_y)</span><br><span class="line">        aryJaccard.append(dictJaccard)</span><br><span class="line"><span class="comment"># 種類数 = query数 * db数</span></span><br><span class="line"><span class="attr">aryJaccard</span> = sorted(aryJaccard, <span class="attr">key</span> = lambda x:x[<span class="string">"Score"</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Jaccard係数が大きい上位20件のDBを正解データとして使う</span></span><br><span class="line"><span class="keyword">if</span> len(aryJaccard) &gt; <span class="number">20</span>:</span><br><span class="line">    <span class="attr">aryJaccard</span> = aryJaccard[-<span class="number">20</span>:]</span><br></pre></td></tr></table></figure>
</li>
<li><p>kを100, 1000, 10000と変化させたときのPrecision Recall Curveを描画します. なお, Precisionは<a href="http://nlp.stanford.edu/IR-book/html/htmledition/evaluation-of-ranked-retrieval-results-1.html" target="_blank" rel="noopener">Interpolated Precision</a>にしています. </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">plotDataSets_x = []</span><br><span class="line">plotDataSets_y = []</span><br><span class="line">plotDataSets_label = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> kNum &lt;= <span class="number">10000</span>:</span><br><span class="line">    aryMinHash = []</span><br><span class="line">    <span class="keyword">for</span> set_x <span class="keyword">in</span> query:</span><br><span class="line">        <span class="keyword">for</span> set_y <span class="keyword">in</span> db:</span><br><span class="line">            dictMinHash = &#123;&#125; </span><br><span class="line">            dictMinHash[<span class="string">"Set"</span>] = set_y</span><br><span class="line">            dictMinHash[<span class="string">"Score"</span>] = MinHash().calculate(set_x, set_y, kNum)</span><br><span class="line">            aryMinHash.append(dictMinHash)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 種類数 = query数 * db数</span></span><br><span class="line">    aryMinHash = sorted(aryMinHash, key = <span class="keyword">lambda</span> x:x[<span class="string">"Score"</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># MinHashによる近似Jaccard係数が大きい上位x(1~100)件</span></span><br><span class="line">    plotData_x = []</span><br><span class="line">    plotData_y = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">1</span>, <span class="number">101</span>):</span><br><span class="line">        MinHashResultStat = aryMinHash[-x:]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># MinHashとJaccardの結果で一致する数をカウント</span></span><br><span class="line">        counter = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> dict_M <span class="keyword">in</span> MinHashResultStat:</span><br><span class="line">            MinHashResult = set(dict_M[<span class="string">"Set"</span>])</span><br><span class="line">            countFlag = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">for</span> dict_J <span class="keyword">in</span> aryJaccard:</span><br><span class="line">                JaccardResult = set(dict_J[<span class="string">"Set"</span>])</span><br><span class="line">                <span class="keyword">if</span> len(MinHashResult) == len(JaccardResult):</span><br><span class="line">                    counter = counter + <span class="number">1</span> <span class="keyword">if</span> len(MinHashResult &amp; JaccardResult) == len(MinHashResult) <span class="keyword">else</span> counter</span><br><span class="line">                    countFlag = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">if</span> countFlag:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> counter &gt;= <span class="number">20</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">print</span> x, <span class="string">","</span>,  kNum, <span class="string">","</span>, counter,  <span class="string">","</span>, (float(counter)/x), <span class="string">","</span>, (float(counter)/<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">        plotData_x.append(float(counter)/<span class="number">20</span>)</span><br><span class="line">        plotData_y.append(float(counter)/x)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># interpolated precision</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>, len(plotData_y)):</span><br><span class="line">        <span class="keyword">if</span> plotData_y[len(plotData_y)-i] &gt; plotData_y[len(plotData_y)-(i+<span class="number">1</span>)]:</span><br><span class="line">            plotData_y[len(plotData_y)-(i+<span class="number">1</span>)] = plotData_y[len(plotData_y)-i]</span><br><span class="line"></span><br><span class="line">    plotDataSets_x.append(plotData_x)</span><br><span class="line">    plotDataSets_y.append(plotData_y)</span><br><span class="line">    plotDataSets_label.append(<span class="string">"k="</span>+str(kNum))</span><br><span class="line"></span><br><span class="line">    kNum *= <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># グラフ生成</span></span><br><span class="line">fig = sns.mpl.pyplot.figure()</span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(len(plotDataSets_label)):</span><br><span class="line">    ax.plot(plotDataSets_x[i], plotDataSets_y[i], label=plotDataSets_label[i])</span><br><span class="line"></span><br><span class="line">ax.legend()</span><br><span class="line">sns.plt.title(<span class="string">u"Min HashによるJaccard係数の近似値を用いた類似検索結果のPrecision Recall Curve"</span>)</span><br><span class="line">sns.plt.xlabel(<span class="string">u"Recall"</span>)</span><br><span class="line">sns.plt.ylabel(<span class="string">u"Precision"</span>)</span><br><span class="line">sns.plt.show()</span><br></pre></td></tr></table></figure>
</li>
<li><p>実行結果です. まとめたコードは<a href="https://github.com/camberbridge/camberbridge.github.io/blob/master/assets/sources/minhashTest.py" target="_blank" rel="noopener">GitHub</a>にあげています.<br><img src="https://camberbridge.github.io/imgs/precision_recall_curve.png" alt="図1 Min HashによるJaccard係数の近似値を用いた類似検索結果"></p>
</li>
</ol>
<p>kを増やすほどカーブの右肩が座標(1, 1)に近づいていることが確認できます. 検索結果の精度が良くなっている(Min HashによるJaccard係数の近似値がJaccard係数に近づいている)ようです. </p>
<h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事ではLocality Sensitive HashingであるMin Hashを用いて, Jaccard係数を近似する実験を行いました. 近似していることの確認は, Min Hashで生成するハッシュ値の数kを増やしていくことにより, 正解(Jaccard係数で導出したデータ)をどれだけ当てられるかを, Min Hashによる近似値についてのPredision Recall Curveを作成することで確かめました. </p>
<p>結果の図より, kを増やすとカーブの右肩が座標(1,1)に近づくため, Jaccard係数で導出した結果に近づいていくことを確認できました. </p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li>“<a href="http://sd.is.uec.ac.jp/koga/lecture/IF2/lec10.pdf" target="_blank" rel="noopener">Jaccard係数とMin Hash</a>“. </li>
<li>“<a href="https://research.preferred.jp/2011/02/minhash/" target="_blank" rel="noopener">Min Hashによる高速な類似検索</a>“.</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>Jaccard係数は集合間の類似度を表す尺度(値域は0から1の間)であり, (1)式により定義されます(値が1に近づくほど類似度が高い). ]]>
    </summary>
    
      <category term="Min Hash" scheme="https://camberbridge.github.io/tags/Min-Hash/"/>
    
      <category term="Jaccard係数" scheme="https://camberbridge.github.io/tags/Jaccard%E4%BF%82%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[自然言語処理における自己相互情報量 (Pointwise Mutual Information, PMI) ]]></title>
    <link href="https://camberbridge.github.io/2016/07/08/%E8%87%AA%E5%B7%B1%E7%9B%B8%E4%BA%92%E6%83%85%E5%A0%B1%E9%87%8F-Pointwise-Mutual-Information-PMI-%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/"/>
    <id>https://camberbridge.github.io/2016/07/08/自己相互情報量-Pointwise-Mutual-Information-PMI-について/</id>
    <published>2016-07-08T08:49:41.000Z</published>
    <updated>2016-07-09T07:08:40.000Z</updated>
    <content type="html"><![CDATA[<p>自己相互情報量とは, 2つの事象の間の関連度合いを測る尺度である(負から正までの値をとる).<br>自然言語処理では自己相互情報量が相互情報量と呼ばれることがある. しかし, 情報理論で定義される相互情報量(後述する)とは全く異なるため, 自己相互情報量と呼ぶのが賢明である.<br>自然言語処理に関する本や論文では略称の<strong>PMI</strong>がよく用いられる.</p>
<hr>
<h2 id="PMIの定義"><a href="#PMIの定義" class="headerlink" title="PMIの定義"></a>PMIの定義</h2><p>確率変数のある実現値xと, 別の確率変数のある実現値yに対して, 自己相互情報量PMI(x, y)は, </p>
<p>$PMI(x, y) = \log_2\frac{P(x, y)}{P(x)P(y)}$  ・・・(1)</p>
<p>と定義され, 値が大きければ大きいほどxとyの関連している度合いが強い. </p>
<ul>
<li>PMIが正の値の場合<ul>
<li>$P(x, y) &gt; P(x)P(y)$ ⇒ $PMI(x, y) &gt; 0$</li>
<li>*<em>xとyが一緒に出現しやすい. (独立よりも)共起しやすい傾向にある. *</em></li>
</ul>
</li>
<li>PMIが負の場合<ul>
<li>$P(x, y) &lt; P(x)P(y)$ ⇒ $PMI(x, y) &lt; 0$</li>
<li>*<em>xとyが一緒に出現しにくい. (独立よりも)共起しにくい傾向にある. *</em></li>
</ul>
</li>
<li>PMIが0の場合<ul>
<li>$P(x, y) = P(x)P(y)$ ⇒ $PMI(x, y) = log1 = 0$</li>
<li>*<em>xとyの関連がない. それぞれ独立に出現する. *</em></li>
</ul>
</li>
<li>正の値, 負の値の絶対値が大きいほど傾向が強い. </li>
</ul>
<h2 id="相互情報量-Mutual-Information-MI-について"><a href="#相互情報量-Mutual-Information-MI-について" class="headerlink" title="相互情報量 (Mutual Information, MI) について"></a>相互情報量 (Mutual Information, MI) について</h2><ul>
<li>MIとは, PMIの平均(確率変数X, Yの全ての実現値$x_{i}$, $y_{i}$に関して平均をとったもの)である.</li>
<li>PMIは実現値(スカラー)の対に関して定義される量に対し, MIは確率変数(ベクトル)の対に関して定義される量である. </li>
</ul>
<h3 id="MIの定義"><a href="#MIの定義" class="headerlink" title="MIの定義"></a>MIの定義</h3><p>2つの確率変数XとYに対し, 相互情報量MI(X, Y)は, </p>
<p>$MI(X, Y) = \sum_{x, y} P(x, y)\log_2\frac{P(x, y)}{P(x)P(y)}$  ・・・(2)</p>
<p>と定義され, 0以上の値をとる <a href="http://omm.ishikawa-nct.ac.jp/ex/exercises/Pj0GgAAA/#answer" target="_blank" rel="noopener">$^1$</a>. </p>
<hr>
<h2 id="自然言語処理におけるPMI"><a href="#自然言語処理におけるPMI" class="headerlink" title="自然言語処理におけるPMI"></a>自然言語処理におけるPMI</h2><p>PMIの値が示す2つの事象の関連度合いは, 自然言語処理においては単語の共起性と捉えることができ, さらに単語の意味的な類似性と近似できる(2つの単語が一緒に起こりやすい場合は, 意味的にも関連しているだろうという直感に基づいて).<br>ここでxとyを単語とすると, </p>
<ul>
<li>ある文中でx, yがそれぞれ出現する確率は$P(x)$, $P(y)$</li>
<li>x, yが文中に同時に出現する確率は$P(x, y)$</li>
</ul>
<p>と表される.<br>式は以下の通り. </p>
<p>$PMI(x, y) = \log_2\frac{P(x, y)}{P(x)P(y)} = \log_2\frac{\frac{C(x, y)}{N}}{\frac{C(x)}{N} \cdot \frac{C(y)}{N}} = \log_2\frac{C(x, y) \cdot N}{C(x)C(y)}$  ・・・(3)</p>
<h3 id="単語の出現確率について"><a href="#単語の出現確率について" class="headerlink" title="単語の出現確率について"></a>単語の出現確率について</h3><p>単語の出現確率は, 最尤推定で決定されることが多い <a href="http://id.fnshr.info/2012/01/24/wordmle/" target="_blank" rel="noopener">$^2$</a>.<br>各単語の出現確率が二項分布に従っているとし, 尤度から最尤推定によって単語の出現確率の式を導出している例は<a href="http://id.fnshr.info/2012/01/24/wordmle/#toc5" target="_blank" rel="noopener">こちら</a></p>
<h3 id="PMIの式の意味"><a href="#PMIの式の意味" class="headerlink" title="PMIの式の意味"></a>PMIの式の意味</h3><p>(1)式を変形すると, 以下のようになる. </p>
<p>$PMI(x, y) = \log_2\frac{P(x, y)}{P(x)P(y)} = \log_2\frac{P(x \cap y)}{P(x)P(y)} = \log_2\frac{P(x)P(y \vert x)}{P(x)P(y)} = \log_2\frac{P(y \vert x)}{P(y)} = \log_2{P(y \vert x)} - \log_2{P(y)}$  ・・・(4)</p>
<p>(4)式は, 単語xが出現したときに単語yが出現する確率について, y単体での出現確率を引いたものである.<br>つまりPMIの式は, <strong>“単語の共起確率から単語単体での出現確率の影響を差し引くことで, より正確に単語間の共起を測ろうとしている”</strong>と理解できる.<br>例えば, “the”のようにどの文中にも現れるような単語は, 他のどの単語に対しても共起確率$P(“the”, w)$が高くなるので, 結果としてPMIの値が大きくなり, 関連が高いと判断されてしまう.<br>これを防ぐために”the”単体での出現確率を差し引くことで, 他単語との関連度を低くできる. </p>
<h3 id="PMIの使い方"><a href="#PMIの使い方" class="headerlink" title="PMIの使い方"></a>PMIの使い方</h3><p>単語総数が10000の文書内にある2つの単語”自然”と”言語”の関連度を測るとする.<br>文中に”自然”が120回, “言語”が40回出現し, 20回共起しているとすると(3)式より, </p>
<p>$PMI(自然, 言語) = \log_{2}\frac{20 \cdot 10000}{120 \cdot 40} \approx 5.38$</p>
<h3 id="共起の判定方法"><a href="#共起の判定方法" class="headerlink" title="共起の判定方法"></a>共起の判定方法</h3><p>2つの単語が共起関係にあるかどうかの判定方法は, 単語Bigramや単語10-gramを使い, 単語xの前後2単語以内もしくは10単語以内に単語yが出現するかどうかで判定することがある <a href="http://d.hatena.ne.jp/n_shuyo/20100827/fsnlp" target="_blank" rel="noopener">$^3$</a>$^,$<a href="http://www.cl.ecei.tohoku.ac.jp/publications/2013/nabeshima-thesis.pdf" target="_blank" rel="noopener">$^4$</a>.<br>つまり, <strong>単語の共起確率は単語n-gramでの共起を基に求める</strong>ということ. </p>
<hr>
<h2 id="PMIの抱える問題と解決策"><a href="#PMIの抱える問題と解決策" class="headerlink" title="PMIの抱える問題と解決策"></a>PMIの抱える問題と解決策</h2><p>PMIには2つの問題があるため, 使う際には考慮する必要がある. </p>
<h3 id="1-共起頻度が0の場合-PMIが計算できない問題"><a href="#1-共起頻度が0の場合-PMIが計算できない問題" class="headerlink" title="1. 共起頻度が0の場合, PMIが計算できない問題"></a>1. 共起頻度が0の場合, PMIが計算できない問題</h3><p>単語の共起頻度が0の場合, </p>
<p>$P(x,y) = 0$ ⇒ $PMI(x, y) = -∞$</p>
<p>と発散してしまい, PMIが計算できない問題がある. </p>
<h4 id="解決策"><a href="#解決策" class="headerlink" title="解決策"></a>解決策</h4><p>この問題に対し, 共起頻度が0の時点でPMIの値を0とするか, もしくはPMI導出式の共起確率部分に一定のパラメータを加算する<strong>スムージング(平滑化)</strong>がよく行われる <a href="http://db-event.jpn.org/deim2016/papers/267.pdf" target="_blank" rel="noopener">$^5$</a>$^,$<a href="http://www.tkl.iis.u-tokyo.ac.jp/top/modules/newdb/extract/1313/data/nl2013_nishina.pdf" target="_blank" rel="noopener">$^6$</a>. </p>
<ul>
<li>共起頻度が0の時点でPMIの値を0にする<ul>
<li>これは単純であるが, 負の値をとるPMIの値を0に丸め込んでしまうため, 「xとyが共起しにくい特徴」を無くしてしまう問題がある.</li>
</ul>
</li>
<li>スムージング <ul>
<li>慣例として対数をとる際に共起頻度に1が加算される. <ul>
<li>1を加算することによるPMIへの影響については, 一定のパラメータを加えたところでPMI同士を比較したときの順序関係は変わらないため, 問題ない.</li>
</ul>
</li>
<li>その都度手動でパラメータを調整する場合もある <a href="http://www.isca-speech.org/archive_open/archive_papers/iscslp2004/102.pdf" target="_blank" rel="noopener">$^7$</a>. <ul>
<li>参考文献[<a href="http://www.isca-speech.org/archive_open/archive_papers/iscslp2004/102.pdf" target="_blank" rel="noopener">7</a>]では, 以下の計算式によってスムージングを行っている. <ul>
<li>$N’(x, y) = N(x, y) + C$  ・・・(5)</li>
<li>$P_{smooth} (x, y) = \frac{N’(x, y) + αP(x)P(y)}{1 + α}$  ・・・(6)</li>
</ul>
</li>
<li>パラメータC, αはクロスバリデーションによって最適値を決め, そのパラメータを使ったスムージング共起確率$P_{smooth} (x, y)$を使ってPMIを計算している. </li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="2-出現頻度の低い単語同士が共起した場合にPMIの値が非常に大きくなる問題"><a href="#2-出現頻度の低い単語同士が共起した場合にPMIの値が非常に大きくなる問題" class="headerlink" title="2. 出現頻度の低い単語同士が共起した場合にPMIの値が非常に大きくなる問題"></a>2. 出現頻度の低い単語同士が共起した場合にPMIの値が非常に大きくなる問題</h3><p>例として単語総数が10000の文書について, 以下の2つの場合を考える. </p>
<ul>
<li>C(x, y) = 1, C(x) = 1, C(y) = 1の場合<ul>
<li>PMI(x, y) = log(10000)</li>
</ul>
</li>
<li>C(x, y) = 1000, C(x) = 1000, C(y) = 1000 の場合<ul>
<li>PMI(x, y) = log(10)</li>
</ul>
</li>
</ul>
<p>単語xとyがそれぞれ1000回出現していて, さらにそれが常に共起している2つ目のPMIの方が値は大きいはずだが, 1つ目の単語の出現頻度が低い場合のPMIの方が大きい.<br>この問題は単語の出現確率が最尤推定による推定量であることが関係しており, 最尤推定で求めた出現確率が単語の正確な出現確率と大きく異なっていることが原因であると考えられる. </p>
<h4 id="解決策-1"><a href="#解決策-1" class="headerlink" title="解決策"></a>解決策</h4><p>この問題を解決するためには単語の出現確率をより正確に求めることが必要である.<br>したがって単語の出現確率に最尤推定量を使うのではなく, <strong>事後分布最大化推定値(maximum a posterior estimator, MAP 推定値)</strong>などの他の推定手法を用いればよい. </p>
<hr>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>[<a href="http://omm.ishikawa-nct.ac.jp/ex/exercises/Pj0GgAAA/#answer" target="_blank" rel="noopener">1</a>]　“例題：相互情報量の性質”.<br>　　<a href="http://omm.ishikawa-nct.ac.jp/ex/exercises/Pj0GgAAA/#answer" target="_blank" rel="noopener">http://omm.ishikawa-nct.ac.jp/ex/exercises/Pj0GgAAA/#answer</a></p>
<p>[<a href="http://id.fnshr.info/2012/01/24/wordmle/" target="_blank" rel="noopener">2</a>]　“単語の出現確率の最尤推定”<br>　　<a href="http://id.fnshr.info/2012/01/24/wordmle/" target="_blank" rel="noopener">http://id.fnshr.info/2012/01/24/wordmle/</a></p>
<p>[<a href="http://d.hatena.ne.jp/n_shuyo/20100827/fsnlp" target="_blank" rel="noopener">3</a>]　“FSNLP 5.4 Mutual Information(相互情報量)”<br>　　<a href="http://d.hatena.ne.jp/n_shuyo/20100827/fsnlp" target="_blank" rel="noopener">http://d.hatena.ne.jp/n_shuyo/20100827/fsnlp</a></p>
<p>[<a href="http://www.cl.ecei.tohoku.ac.jp/publications/2013/nabeshima-thesis.pdf" target="_blank" rel="noopener">4</a>]　鍋島啓太. “<a href="http://www.cl.ecei.tohoku.ac.jp/publications/2013/nabeshima-thesis.pdf" target="_blank" rel="noopener">構成性に基づく評価極性知識獲得</a>“. 2011.</p>
<p>[<a href="http://db-event.jpn.org/deim2016/papers/267.pdf" target="_blank" rel="noopener">5</a>]　岩成達哉ら. “<a href="http://db-event.jpn.org/deim2016/papers/267.pdf" target="_blank" rel="noopener">多様な手がかりを用いた形容詞に基づく概念語の順序付け</a>“. 2016.</p>
<p>[<a href="http://www.tkl.iis.u-tokyo.ac.jp/top/modules/newdb/extract/1313/data/nl2013_nishina.pdf" target="_blank" rel="noopener">6</a>]　仁科俊晴ら. “<a href="http://www.tkl.iis.u-tokyo.ac.jp/top/modules/newdb/extract/1313/data/nl2013_nishina.pdf" target="_blank" rel="noopener">対義形容詞対との相互情報量を利用した概念語の順序付け</a>“. 2013.</p>
<p>[<a href="http://www.isca-speech.org/archive_open/archive_papers/iscslp2004/102.pdf" target="_blank" rel="noopener">7</a>]　Gang Guoら. “<a href="http://www.isca-speech.org/archive_open/archive_papers/iscslp2004/102.pdf" target="_blank" rel="noopener">A COMPARATIVE STUDY ON VARIOUS CONFIDENCE MEASURES IN LARGE VOCABULARY SPEECH RECOGNITION</a>“. 2004.</p>
<p>[<a href="http://www.lr.pi.titech.ac.jp/~takamura/ml4nl.html" target="_blank" rel="noopener">8</a>] 高村大也. “<a href="http://www.lr.pi.titech.ac.jp/~takamura/ml4nl.html" target="_blank" rel="noopener">言語処理のための機械学習入門</a>”. 2011.</p>
<p>※ [<a href="http://www.lr.pi.titech.ac.jp/~takamura/ml4nl.html" target="_blank" rel="noopener">8</a>]については1.6章と4.6章を参考にした. </p>
]]></content>
    <summary type="html">
    <![CDATA[<p>自己相互情報量とは, 2つの事象の間の関連度合いを測る尺度である(負から正までの値をとる).<br>自然言語処理では自己相互情報量が相互情報量と呼ばれることがある. しかし, 情報理論で定義される相互情報量(後述する)とは全く異なるため, 自己相互情報量と呼ぶのが賢明である]]>
    </summary>
    
      <category term="素性選択" scheme="https://camberbridge.github.io/tags/%E7%B4%A0%E6%80%A7%E9%81%B8%E6%8A%9E/"/>
    
      <category term="自己相互情報量" scheme="https://camberbridge.github.io/tags/%E8%87%AA%E5%B7%B1%E7%9B%B8%E4%BA%92%E6%83%85%E5%A0%B1%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Google検索の検索結果画面をPC版にする]]></title>
    <link href="https://camberbridge.github.io/2016/04/29/Google%E6%A4%9C%E7%B4%A2%E3%81%AE%E6%A4%9C%E7%B4%A2%E7%B5%90%E6%9E%9C%E7%94%BB%E9%9D%A2%E3%82%92PC%E7%89%88%E3%81%AB%E3%81%99%E3%82%8B/"/>
    <id>https://camberbridge.github.io/2016/04/29/Google検索の検索結果画面をPC版にする/</id>
    <published>2016-04-29T11:06:18.000Z</published>
    <updated>2016-05-07T06:18:32.000Z</updated>
    <content type="html"><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>スマホでGoogle検索エンジンを使ってWeb検索すると, 検索結果画面はスマホの画面サイズにアレンジされたものとなって表示される. さらに検索結果件数が表示されなくなったりと, 表示そのものの簡単化も行われる. </p>
<p>自分はFirefox add-on for mobileの開発で, <em>WebIDF (Web Inverse Document Frequency)</em> を特徴量のひとつとして使っている関係上, 検索結果件数を取得できないことは致命傷. そこでGoogle検索結果画面のPC版表示がどうしても必要だったので, その対処法を示す. </p>
<h2 id="対処法"><a href="#対処法" class="headerlink" title="対処法"></a>対処法</h2><p>検索結果画面のURL末尾にパラメータ<code>&amp;nomo=1</code>を付与する. </p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http<span class="variable">s:</span>//www.google.<span class="keyword">co</span>.jp/<span class="built_in">search</span>?q=&lt;検索クエリ&gt;&amp;nomo=<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>これによってPC版の検索結果画面が表示される. そして検索結果件数が欲しいなら好みのやり方で#resultStatsを指定して取得するだけ. </p>
<h1 id="おまけ"><a href="#おまけ" class="headerlink" title="おまけ"></a>おまけ</h1><p>Google検索結果画面の表示件数を変更したい場合にも上記方法は使える. Google検索エンジンの設定画面のURL末尾にパラメータ<code>&amp;nomo=1</code>を付与してアクセスすれば詳細な設定変更を行うことができる. </p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>スマホでGoogle検索エンジンを使ってWeb検索すると, 検索結果画面はスマホの画面サイズにアレンジされたものとなって表示される. さらに]]>
    </summary>
    
      <category term="Webスクレイピング" scheme="https://camberbridge.github.io/tags/Web%E3%82%B9%E3%82%AF%E3%83%AC%E3%82%A4%E3%83%94%E3%83%B3%E3%82%B0/"/>
    
      <category term="Firefox add-on for mobile" scheme="https://camberbridge.github.io/tags/Firefox-add-on-for-mobile/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Javaは識別子にUnicode文字が使えるよってお話]]></title>
    <link href="https://camberbridge.github.io/2016/03/13/Java%E3%81%AF%E8%AD%98%E5%88%A5%E5%AD%90%E3%81%ABUnicode%E6%96%87%E5%AD%97%E3%81%8C%E4%BD%BF%E3%81%88%E3%82%8B%E3%82%88%E3%81%A3%E3%81%A6%E3%81%8A%E8%A9%B1/"/>
    <id>https://camberbridge.github.io/2016/03/13/Javaは識別子にUnicode文字が使えるよってお話/</id>
    <published>2016-03-12T16:31:40.000Z</published>
    <updated>2016-03-12T17:59:38.000Z</updated>
    <content type="html"><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>半年前から先輩の誘いでJava講習の非常勤講師を”ときどき”やっている. そしてその講習会の特に初心者向けでは, 意外な質問が飛んできたり受講者分のエラーコードが見られたりするので, 結構楽しい.<br>そこで今回は質問の中で「ああそういえば」となった事を書き残す. それはJavaで識別子にUnicode文字が使えるよって(まぁ言語仕様の)お話. </p>
<h2 id="言語規定-識別子"><a href="#言語規定-識別子" class="headerlink" title="言語規定 - 識別子"></a>言語規定 - 識別子</h2><p>Javaでは文字リテラルや文字列リテラル, 識別子(クラス, メソッド, 変数名)にUnicode文字を使うことができる. それらはUTF-8, UTF-16で書くもよし, エスケープ記法で書くもよし.<br>下記例は識別子をUTF-8で書いた場合のプログラムである. これをExample.javaとして保存し, コンパイルしてから実行すればちくわと最も相性のいい”きゅうり”を表示する!…はず!!</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span> &#123;</span></span><br><span class="line">        <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> ちくわについて &#123;</span></span><br><span class="line">                <span class="keyword">String</span> これでしょ;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">void</span> に合うものは (<span class="keyword">String</span> 相性) &#123;</span><br><span class="line">                        これでしょ = 相性;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">String</span> に合うもの()&#123;</span><br><span class="line">                        <span class="keyword">return</span> これでしょ;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(<span class="keyword">String</span>[] args)</span></span>&#123;</span><br><span class="line">                ちくわについて ちくわ = <span class="keyword">new</span> ちくわについて();</span><br><span class="line">                ちくわ.に合うものは(<span class="string">"きゅうり"</span>);</span><br><span class="line"></span><br><span class="line">                System.out.<span class="built_in">println</span>(ちくわ.に合うもの());</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上記例で示したことはJavaの言語規定にしっかりと記されている(<a href="http://www.y-adagio.com/public/standards/tr_javalang/3.doc.htm#40625" target="_blank" rel="noopener">Java言語規定 - 3.8識別子</a>).</p>
<h1 id="おまけ"><a href="#おまけ" class="headerlink" title="おまけ"></a>おまけ</h1><p>これを応用?した面白い例を紹介します. </p>
<figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">\u</span>0070<span class="symbol">\u</span>0075<span class="symbol">\u</span>0062<span class="symbol">\u</span>006c<span class="symbol">\u</span>0069<span class="symbol">\u</span>0063<span class="symbol">\u</span>0020<span class="symbol">\u</span>0020<span class="symbol">\u</span>0020<span class="symbol">\u</span>0020</span><br><span class="line"><span class="symbol">\u</span>0063<span class="symbol">\u</span>006c<span class="symbol">\u</span>0061<span class="symbol">\u</span>0073<span class="symbol">\u</span>0073<span class="symbol">\u</span>0020<span class="symbol">\u</span>0055<span class="symbol">\u</span>0067<span class="symbol">\u</span>006c<span class="symbol">\u</span>0079</span><br><span class="line"><span class="symbol">\u</span>007b<span class="symbol">\u</span>0070<span class="symbol">\u</span>0075<span class="symbol">\u</span>0062<span class="symbol">\u</span>006c<span class="symbol">\u</span>0069<span class="symbol">\u</span>0063<span class="symbol">\u</span>0020<span class="symbol">\u</span>0020<span class="symbol">\u</span>0020</span><br><span class="line"><span class="symbol">\u</span>0020<span class="symbol">\u</span>0020<span class="symbol">\u</span>0020<span class="symbol">\u</span>0020<span class="symbol">\u</span>0073<span class="symbol">\u</span>0074<span class="symbol">\u</span>0061<span class="symbol">\u</span>0074<span class="symbol">\u</span>0069<span class="symbol">\u</span>0063</span><br><span class="line"><span class="symbol">\u</span>0076<span class="symbol">\u</span>006f<span class="symbol">\u</span>0069<span class="symbol">\u</span>0064<span class="symbol">\u</span>0020<span class="symbol">\u</span>006d<span class="symbol">\u</span>0061<span class="symbol">\u</span>0069<span class="symbol">\u</span>006e<span class="symbol">\u</span>0028</span><br><span class="line"><span class="symbol">\u</span>0053<span class="symbol">\u</span>0074<span class="symbol">\u</span>0072<span class="symbol">\u</span>0069<span class="symbol">\u</span>006e<span class="symbol">\u</span>0067<span class="symbol">\u</span>005b<span class="symbol">\u</span>005d<span class="symbol">\u</span>0020<span class="symbol">\u</span>0020</span><br><span class="line"><span class="symbol">\u</span>0020<span class="symbol">\u</span>0020<span class="symbol">\u</span>0020<span class="symbol">\u</span>0020<span class="symbol">\u</span>0061<span class="symbol">\u</span>0072<span class="symbol">\u</span>0067<span class="symbol">\u</span>0073<span class="symbol">\u</span>0029<span class="symbol">\u</span>007b</span><br><span class="line"><span class="symbol">\u</span>0053<span class="symbol">\u</span>0079<span class="symbol">\u</span>0073<span class="symbol">\u</span>0074<span class="symbol">\u</span>0065<span class="symbol">\u</span>006d<span class="symbol">\u</span>002e<span class="symbol">\u</span>006f<span class="symbol">\u</span>0075<span class="symbol">\u</span>0074</span><br><span class="line"><span class="symbol">\u</span>002e<span class="symbol">\u</span>0070<span class="symbol">\u</span>0072<span class="symbol">\u</span>0069<span class="symbol">\u</span>006e<span class="symbol">\u</span>0074<span class="symbol">\u</span>006c<span class="symbol">\u</span>006e<span class="symbol">\u</span>0028<span class="symbol">\u</span>0020</span><br><span class="line"><span class="symbol">\u</span>0022<span class="symbol">\u</span>0048<span class="symbol">\u</span>0065<span class="symbol">\u</span>006c<span class="symbol">\u</span>006c<span class="symbol">\u</span>006f<span class="symbol">\u</span>0020<span class="symbol">\u</span>0077<span class="symbol">\u</span>0022<span class="symbol">\u</span>002b</span><br><span class="line"><span class="symbol">\u</span>0022<span class="symbol">\u</span>006f<span class="symbol">\u</span>0072<span class="symbol">\u</span>006c<span class="symbol">\u</span>0064<span class="symbol">\u</span>0022<span class="symbol">\u</span>0029<span class="symbol">\u</span>003b<span class="symbol">\u</span>007d<span class="symbol">\u</span>007d</span><br></pre></td></tr></table></figure>

<p>!?<br>!?!?<br>自分はUnicodeマスターではないため分かりませんでしたが, 実行すると”Hello world”と表示します. これはUgly.javaとして保存すればちゃんと扱えるプログラムなのです.<br>下記は実際にこれをマルチバイト文字に変換したものです. </p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ugly</span> &#123;</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">                System.out.<span class="built_in">println</span>(<span class="string">"Hello w"</span> + <span class="string">"orld"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ちなみに, このおまけは<a href="http://www.amazon.co.jp/Java-Puzzlers-%E7%BD%A0%E3%80%81%E8%90%BD%E3%81%A8%E3%81%97%E7%A9%B4%E3%80%81%E3%82%B3%E3%83%BC%E3%83%8A%E3%83%BC%E3%82%B1%E3%83%BC%E3%82%B9-%E3%82%B8%E3%83%A7%E3%82%B7%E3%83%A5%E3%82%A2%E3%83%BB%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF/dp/4894716895" target="_blank" rel="noopener">Java Puzzlers</a>というJavaの問題集に載っています. 難しいけどオススメです. </p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>半年前から先輩の誘いでJava講習の非常勤講師を”ときどき”やっている. そしてその講習会の特に初心者向けでは, 意外な質問が飛んできたり受]]>
    </summary>
    
      <category term="Java" scheme="https://camberbridge.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[TensorFlowでRNNのPTB LSTM model(ptb_word_lm.py)を実行するとエラーが出る件について, 解決したので記録]]></title>
    <link href="https://camberbridge.github.io/2016/03/03/TensorFlow%E3%81%A7RNN%E3%81%AEPTB-LSTM-model-ptb-word-lm-py-%E3%81%A7%E3%82%A8%E3%83%A9%E3%83%BC%E3%81%8C%E5%87%BA%E3%82%8B%E4%BB%B6%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6-%E8%A7%A3%E6%B1%BA%E3%81%97%E3%81%9F%E3%81%AE%E3%81%A7%E8%A8%98%E9%8C%B2/"/>
    <id>https://camberbridge.github.io/2016/03/03/TensorFlowでRNNのPTB-LSTM-model-ptb-word-lm-py-でエラーが出る件について-解決したので記録/</id>
    <published>2016-03-03T07:48:12.000Z</published>
    <updated>2016-03-03T09:29:11.000Z</updated>
    <content type="html"><![CDATA[<h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul>
<li>OS X</li>
<li>Python 2.7系</li>
<li>TensorFlow 0.7系</li>
</ul>
<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>TensorFlowで<a href="https://www.tensorflow.org/versions/master/tutorials/recurrent/index.html" target="_blank" rel="noopener">RNNのPTB LSTM model(ptb_word_lm.py)</a>の実行を試みたところ, エラーになったので, その対処をしました.<br>カレントディレクトリはptb_word_lm.pyがある階層です. </p>
<h3 id="エラー1「AttributeError-‘module’-object-has-no-attribute-‘gfile’」"><a href="#エラー1「AttributeError-‘module’-object-has-no-attribute-‘gfile’」" class="headerlink" title="エラー1「AttributeError: ‘module’ object has no attribute ‘gfile’」"></a>エラー1「AttributeError: ‘module’ object has no attribute ‘gfile’」</h3><p>GitHubの<a href="https://github.com/tensorflow/tensorflow/issues/1121" target="_blank" rel="noopener">issue #1121</a>によると, ズバリ0.6.0を使ってくれとのことでした. よって今のところはブランチを0.6.0に変えて解決です(vrvさんによると現在バグ対処してくれている模様です).</p>
<h3 id="エラー2「ImportError-No-module-named-ptb」"><a href="#エラー2「ImportError-No-module-named-ptb」" class="headerlink" title="エラー2「ImportError: No module named ptb」"></a>エラー2「ImportError: No module named ptb」</h3><p>ptb_word_lm.pyの<code>from tensorflow.models.rnn.ptb import reader</code>を<code>import reader</code>にして解決です.</p>
<h3 id="エラー3「TypeError-unsupported-operand-type-s-for-‘Tensor’-and-‘int’」"><a href="#エラー3「TypeError-unsupported-operand-type-s-for-‘Tensor’-and-‘int’」" class="headerlink" title="エラー3「TypeError: unsupported operand type(s) for /: ‘Tensor’ and ‘int’」"></a>エラー3「TypeError: unsupported operand type(s) for /: ‘Tensor’ and ‘int’」</h3><p><strong>future</strong>のdivisionモジュールでの割り算でエラーが出ています.<br>これはPython 3系を使っていれば起こらないエラーのようです. 自分は2.7系なので<code>from __future__ import division</code>をコメントアウトして解決です.</p>
<h3 id="エラー4「NameError-global-name-‘time’-is-not-defined」"><a href="#エラー4「NameError-global-name-‘time’-is-not-defined」" class="headerlink" title="エラー4「NameError: global name ‘time’ is not defined」"></a>エラー4「NameError: global name ‘time’ is not defined」</h3><p>timeモジュールが見つからないためエラーが出ています.<br><code>import time</code>を追加して解決です.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul>
<li>OS X</li>
<li>Python 2.7系</li>
<li>TensorFlow 0.7系</li>
</ul>
<h]]>
    </summary>
    
      <category term="TensorFlow" scheme="https://camberbridge.github.io/tags/TensorFlow/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[トピックモデルの実験]]></title>
    <link href="https://camberbridge.github.io/2016/02/11/%E3%83%88%E3%83%94%E3%83%83%E3%82%AF%E3%83%A2%E3%83%87%E3%83%AB%E3%81%AE%E5%AE%9F%E9%A8%93/"/>
    <id>https://camberbridge.github.io/2016/02/11/トピックモデルの実験/</id>
    <published>2016-02-11T07:24:48.000Z</published>
    <updated>2019-12-16T15:44:08.000Z</updated>
    <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>トピックモデルとは, 文書集合から特徴(話題)を抽出する手法です. また, それぞれの文書が持つ話題を抽出したり, 文書間の類似性を抽出することが可能な手法です.<br>そこで今回は, トピックモデルを用いてニュース記事を対象に話題を抽出する実験を行ってみます. なお, トピックモデルの中でも特に潜在意味解析(latent semantic analysis, LSA)を実際に用いています(正確には, LSAはベクトル空間モデルであり, このLSAを確率モデルに拡張した確率的潜在意味解析がトピックモデルです. しかし, トピックモデルのカテゴリ(離散値確率)分布は, LSAで用いる行列分解手法として捉えることができるので, 僕は同じ物として扱っています). </p>
<h3 id="潜在意味解析-latent-semantic-analysis-LSA"><a href="#潜在意味解析-latent-semantic-analysis-LSA" class="headerlink" title="潜在意味解析(latent semantic analysis, LSA)"></a>潜在意味解析(latent semantic analysis, LSA)</h3><p>LSAは, 文書集合データを(文書総数 x 単語数)の行列Nで表現したときに, 掛け合わせることで再び元の行列を構築できるような, 小さな(低ランクの)2つの行列を見つけることをします(これを非負値行列因子分解と言います). このとき, それぞれの行列は特徴の組み合わせで構築されているため, この特徴を用いることによって文書に潜在するトピック(文書を特徴づける単語)を抽出します. </p>
<h3 id="非負値行列因子分解-nonnegative-matrix-factorization-NMF"><a href="#非負値行列因子分解-nonnegative-matrix-factorization-NMF" class="headerlink" title="非負値行列因子分解(nonnegative matrix factorization, NMF)"></a>非負値行列因子分解(nonnegative matrix factorization, NMF)</h3><p>NMFとは, 行列で表現した文字・画像・音声などのデータ(非負値行列)を指定する基底数に行列分解し, 低ランクの表現にすることによって, それぞれの行列が持つ潜在的な特徴を抽出することを可能にした行列低ランク近似手法です. 簡単に言えば, 非負値行列を2つの非負値行列に分解するアルゴリズムです. 以下, NMFについて詳細に説明します. </p>
<p>図1に示すように, 文書集合データを(D x V)の行列Nで表現するとします. ここでDは文書総数, Vは単語数です.<br><img src="https://camberbridge.github.io/imgs/nmf.png" alt="図1 NMF"><br>このNを分解すると, W(K x D)の基底行列とH(K x V)の特徴重みの行列となります. そしてこれらWとHを掛け合わせることにより, 元の行列Nの近似値が得られますが, 完全に一致する行列W, Hの値を求めるのは困難です. </p>
<p>そこで, この近似値を求める問題は, 行列Nと転置したWにHを掛け合わせた行列の距離を小さくする問題として扱うことができます. 具体的には, フロベニウスノルムの最小化を行います(図2).<br><img src="https://camberbridge.github.io/imgs/frobenius_norm.png" alt="図2 フロベニウスノルムの最小化"><br>フロベニウスノルムの最小化問題には, 模擬アニーリングや勾配降下法, 乗法的更新ルールなど, いくつかの数学的解法が提案されていますが, NMFで最も用いられる解法は乗法的更新ルールです(<a href="https://docs.google.com/viewer?a=v&pid=sites&srcid=ZGVmYXVsdGRvbWFpbnx0aGVzaXNvbnN0b2NrbWluaW5nfGd4OjQ5OThmZTE0NThhZTE5ODc" target="_blank" rel="noopener">参考論文</a>).<br>乗法的更新ルールの式を図3に示します.<br><img src="https://camberbridge.github.io/imgs/jyohotekikoushinrule.png" alt="図3 乗法的更新ルールの式"><br>そして, フロベニウスノルムの最小化問題を解くために, NMFでは行列WとHをランダムな値で初期化し, 乗法的更新ルールの式にしたがってWとHを更新して距離が収束するまでこの処理を繰り返します. NMFはこのようにして行列の低ランク近似を行います. </p>
<hr>
<h2 id="方針"><a href="#方針" class="headerlink" title="方針"></a>方針</h2><ul>
<li>ニュース記事を文書として, 大量の文書から話題になっているトピックを抽出します. さらに, 話題になっているトピックを持つ文書を抽出します. </li>
<li>各文書が持つ潜在的な話題を抽出します. </li>
</ul>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ol>
<li>様々な分野の情報を発信するサイト<a href="http://allabout.co.jp/" target="_blank" rel="noopener">All About</a>が公開している<a href="http://rss.allabout.co.jp/" target="_blank" rel="noopener">RSS</a>を用いて文書を収集する.</li>
<li>収集した各文書について本文抽出, 形態素解析の処理を施すことによって形態素単位で分かち書きする.</li>
<li>単語をBOW(bug-of-words)表現する.<ol>
<li>各文書に存在する単語について, その文書における出現回数を数える.</li>
<li>全文書に存在する単語について, 全文書における出現回数を数える. </li>
<li>1と2から特徴行列と特徴単語の集合を生成する. </li>
</ol>
</li>
<li>NMFを用いて文書の持つ潜在的な特徴を抽出する. </li>
</ol>
<h2 id="実装"><a href="#実装" class="headerlink" title="実装"></a>実装</h2><h3 id="BOWの実装"><a href="#BOWの実装" class="headerlink" title="BOWの実装"></a>BOWの実装</h3><ol>
<li>Pythonのfeedparserを用いてRSSから文書を取得します. この時, 出来るだけ異なる分野の記事(RSS)を取得するようにします. これはトピックモデル全般に言えることです. 今回は下記のRSSを使用しました. <figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">feedlist=[<span class="symbol">'http</span>:<span class="comment">//rss.allabout.co.jp/aa/latest/ch/health/',</span></span><br><span class="line">    <span class="symbol">'http</span>:<span class="comment">//rss.allabout.co.jp/aa/latest/ch/house/',</span></span><br><span class="line">    <span class="symbol">'http</span>:<span class="comment">//rss.allabout.co.jp/aa/latest/ch/domestic/',</span></span><br><span class="line">    <span class="symbol">'http</span>:<span class="comment">//rss.allabout.co.jp/aa/latest/ch/ch_creditcard/',</span></span><br><span class="line">    <span class="symbol">'http</span>:<span class="comment">//rss.allabout.co.jp/aa/latest/ch/beautydiet/',</span></span><br><span class="line">    <span class="symbol">'http</span>:<span class="comment">//rss.allabout.co.jp/aa/latest/ch/mobile/',</span></span><br><span class="line">    <span class="symbol">'http</span>:<span class="comment">//rss.allabout.co.jp/aa/latest/ch/pet/',</span></span><br><span class="line">    <span class="symbol">'http</span>:<span class="comment">//rss.allabout.co.jp/aa/latest/ch/marriage/',</span></span><br><span class="line">    <span class="symbol">'http</span>:<span class="comment">//rss.allabout.co.jp/aa/latest/ch/mensbeauty/',</span></span><br><span class="line">    <span class="symbol">'http</span>:<span class="comment">//rss.allabout.co.jp/aa/latest/ch/fashion/',</span></span><br><span class="line">    <span class="symbol">'http</span>:<span class="comment">//rss.allabout.co.jp/aa/latest/ch/ch_sweets/',</span></span><br><span class="line">    <span class="symbol">'http</span>:<span class="comment">//rss.allabout.co.jp/aa/latest/ch/examination/',</span></span><br><span class="line">    <span class="symbol">'http</span>:<span class="comment">//rss.allabout.co.jp/aa/latest/ch/auto/',</span></span><br><span class="line">    <span class="symbol">'http</span>:<span class="comment">//rss.allabout.co.jp/aa/latest/ch/homeelectronics/',</span></span><br><span class="line">    <span class="symbol">'http</span>:<span class="comment">//rss.allabout.co.jp/aa/latest/ch/ch_sports/',</span></span><br><span class="line">    <span class="symbol">'http</span>:<span class="comment">//rss.allabout.co.jp/aa/latest/ch/ch_game/',</span></span><br><span class="line">    <span class="symbol">'http</span>:<span class="comment">//rss.allabout.co.jp/aa/latest/ch/ch_hobby/']</span></span><br></pre></td></tr></table></figure></li>
<li>取得したHTMLから本文の抽出を行います. 具体的には, HTMLタグを除いた文字列を集める処理を施します. <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def stripHTML(h):</span><br><span class="line">    <span class="attribute">p</span>=<span class="string">''</span></span><br><span class="line">    <span class="attribute">s</span>=0</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> h:</span><br><span class="line">        <span class="keyword">if</span> <span class="attribute">c</span>=='&lt;': <span class="attribute">s</span>=1</span><br><span class="line">        elif <span class="attribute">c</span>=='&gt;':</span><br><span class="line">            <span class="attribute">s</span>=0</span><br><span class="line">            p+=<span class="string">' '</span></span><br><span class="line">        elif <span class="attribute">s</span>==0: p+=c</span><br><span class="line">    return p</span><br></pre></td></tr></table></figure></li>
<li>抽出した本文を形態素単位で分かち書きします. 具体的には, 形態素解析器<a href="https://pypi.python.org/pypi/Janome" target="_blank" rel="noopener">Janome</a>を用いて形態素解析し, 定める単語単位で分かち書きします. 定める単語は, 以下のルールに従う単語としました.<ul>
<li>名詞であること </li>
<li>接尾辞でないこと</li>
<li>代名詞でないこと</li>
<li>非自立語でないこと</li>
<li>数でないこと</li>
<li>形容動詞語幹でないこと</li>
<li>(英単語の場合)文字列長が4以上であること<br>下記, 単語を分割するコード. <figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">def separatewords(text):</span><br><span class="line">    separatedWord=[]</span><br><span class="line">    t=Tokenizer()</span><br><span class="line">    tokens=t.<span class="keyword">tokenize</span>(unicode(text, <span class="string">"utf-8"</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">token</span> <span class="keyword">in</span> tokens:</span><br><span class="line">        posList=<span class="keyword">token</span>.part_of_speech.<span class="keyword">split</span>(<span class="string">","</span>)</span><br><span class="line"></span><br><span class="line">        pos1=posList[0]</span><br><span class="line">        <span class="keyword">if</span> isinstance(pos1, unicode):</span><br><span class="line">          pos1=pos1.<span class="keyword">encode</span>(<span class="string">"utf-8"</span>)</span><br><span class="line"></span><br><span class="line">        pos2=posList[1]</span><br><span class="line">        <span class="keyword">if</span> isinstance(pos2, unicode):</span><br><span class="line">          pos2=pos2.<span class="keyword">encode</span>(<span class="string">"utf-8"</span>)</span><br><span class="line"></span><br><span class="line">        ruby=<span class="keyword">token</span>.reading</span><br><span class="line">        <span class="keyword">if</span> isinstance(ruby, unicode):</span><br><span class="line">          ruby=ruby.<span class="keyword">encode</span>(<span class="string">"utf-8"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> pos1==<span class="string">"名詞"</span>:</span><br><span class="line">            <span class="keyword">if</span> pos2!=<span class="string">"接尾"</span> and pos2!=<span class="string">"代名詞"</span> and pos2!=<span class="string">"非自立"</span> and pos2!=<span class="string">"数"</span> and pos2!=<span class="string">"形容動詞語幹"</span>:</span><br><span class="line">                <span class="keyword">if</span> ruby!=<span class="string">"*"</span>:</span><br><span class="line">                    separatedWord.<span class="keyword">append</span>(<span class="keyword">token</span>.surface.<span class="built_in">lower</span>())</span><br><span class="line">                    <span class="keyword">print</span> <span class="keyword">token</span>.surface.<span class="built_in">lower</span>()</span><br><span class="line">                elif pos2!=<span class="string">"サ変接続"</span> and len(<span class="keyword">token</span>.surface)&gt;3:</span><br><span class="line">                    # 英単語に関しては4文字以上の単語を扱う</span><br><span class="line">                    separatedWord.<span class="keyword">append</span>(<span class="keyword">token</span>.surface.<span class="built_in">lower</span>())</span><br><span class="line">                    <span class="keyword">print</span> <span class="keyword">token</span>.surface.<span class="built_in">lower</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> separatedWord</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>単語をBOW表現します. 具体的にはRSSで取得した文書について, タイトルと本文を抽出して存在する単語の数をカウントします. そして, 単語の出現回数を保持した行列を生成します. <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">def</span> <span class="string">getarticlewords():</span></span><br><span class="line">    <span class="attr">allwords</span>=<span class="string">&#123;&#125;  # 全文書の総単語とその出現回数</span></span><br><span class="line">    <span class="attr">articlewords</span>=<span class="string">[]  # 各文書の総単語とその出現回数</span></span><br><span class="line">    <span class="attr">articletitles</span>=<span class="string">[]  # 文書タイトル</span></span><br><span class="line">    <span class="attr">ec</span>=<span class="string">0</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">for</span> <span class="string">feed in feedlist:</span></span><br><span class="line">        <span class="attr">f</span>=<span class="string">feedparser.parse(feed)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">        # すべての記事をループする</span></span><br><span class="line">        <span class="attr">for</span> <span class="string">e in f.entries:</span></span><br><span class="line"><span class="comment">            # 同一の記事の場合は飛ばす</span></span><br><span class="line">            <span class="attr">if</span> <span class="string">e.title in articletitles: continue</span></span><br><span class="line"></span><br><span class="line"><span class="comment">            # 単語を抽出する</span></span><br><span class="line">            <span class="attr">txt</span>=<span class="string">e.title.encode('utf8')+stripHTML(e.description.encode('utf8'))</span></span><br><span class="line">            <span class="attr">words</span>=<span class="string">separatewords(txt)</span></span><br><span class="line">            <span class="attr">articlewords.append(&#123;&#125;)</span></span><br><span class="line">            <span class="attr">articletitles.append(e.title)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">            # allwordsとarticlewordsにあるこの単語のカウントを増やす</span></span><br><span class="line">            <span class="attr">for</span> <span class="string">word in words:</span></span><br><span class="line">                <span class="attr">allwords.setdefault(word,0)</span></span><br><span class="line">                <span class="meta">allwords[word]+</span>=<span class="string">1</span></span><br><span class="line">                <span class="attr">articlewords[ec].setdefault(word,0)</span></span><br><span class="line">                <span class="meta">articlewords[ec][word]+</span>=<span class="string">1</span></span><br><span class="line"></span><br><span class="line">            <span class="meta">ec+</span>=<span class="string">1</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">return</span> <span class="string">allwords,articlewords,articletitles</span></span><br></pre></td></tr></table></figure></li>
<li>行を文書総数, 列を特徴単語総数とした特徴行列と, 全文書に存在する特徴単語の集合を生成します. なお, 特徴単語は一般的な単語であるが一般的すぎない単語としました. 具体的には, 1文書に出現する回数が4以上, かつ文書総数の6割未満の単語を特徴単語としました. <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def makematrix(allw,articlew):</span><br><span class="line">    wordvec=[]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 一般的だが一般的すぎない(特徴があるとする)単語のみを利用する</span></span><br><span class="line">    <span class="keyword">for</span> w,c <span class="keyword">in</span> allw.<span class="keyword">items</span>():</span><br><span class="line">        <span class="keyword">if</span> c&gt;<span class="number">3</span> <span class="keyword">and</span> c&lt;<span class="built_in">len</span>(articlew)*<span class="number">0.6</span>: </span><br><span class="line">            wordvec.append(w)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 各文書における特徴単語の出現回数の分布を持つ行列(特徴行列)を生成する</span></span><br><span class="line">    l1=[[(<span class="built_in">word</span> <span class="keyword">in</span> f <span class="keyword">and</span> f[<span class="built_in">word</span>] <span class="keyword">or</span> <span class="number">0</span>) <span class="keyword">for</span> <span class="built_in">word</span> <span class="keyword">in</span> wordvec] <span class="keyword">for</span> f <span class="keyword">in</span> articlew]</span><br><span class="line">    <span class="literal">return</span> l1,wordvec</span><br></pre></td></tr></table></figure></li>
<li>Pythonインタプリタを使い, 上記コードによって取得した文書から特徴単語を抽出し, BOW表現する様子を確認してみたいと思います. なお, 上記コードをまとめたファイルを<a href="https://github.com/camberbridge/camberbridge.github.io/blob/master/assets/sources/newsfeatures.py" target="_blank" rel="noopener">GitHub</a>にあげておきます. <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ python</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; import newsfeatures</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; allw,artw,artt=newsfeatures.getarticlewords()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; wordmatrix,wordvec=newsfeatures.makematrix(allw,artw)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; len(artt)</span><br><span class="line"><span class="number">340</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; len(wordvec)</span><br><span class="line"><span class="number">513</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; len(wordmatrix)</span><br><span class="line"><span class="number">340</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; len(wordmatrix[<span class="number">0</span>])</span><br><span class="line"><span class="number">513</span></span><br></pre></td></tr></table></figure>
取得した記事340個から特徴単語を513個抽出できました. そしてBOW表現した特徴行列wordmatrixが得られました. </li>
</ol>
<h3 id="NMFの実装"><a href="#NMFの実装" class="headerlink" title="NMFの実装"></a>NMFの実装</h3><p>特徴行列が得られたので, NMFによって文書の持つ潜在的な特徴を抽出します. </p>
<ol>
<li>フロベニウスノルムの最小化のために, 残差平方和を求めるプログラムを用意します. <figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def <span class="keyword">difcost(a,b):</span></span><br><span class="line"><span class="keyword"> </span>       <span class="keyword">dif=0</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword"> </span>       for i in range(<span class="keyword">shape(a)[0]): </span> <span class="comment"># 行</span></span><br><span class="line">                for <span class="keyword">j </span>in range(<span class="keyword">shape(a)[1]): </span> <span class="comment"># 列</span></span><br><span class="line">                        <span class="keyword">dif+=pow(a[i,j]-b[i,j],2)</span></span><br><span class="line"><span class="keyword"> </span>       return <span class="keyword">dif</span></span><br></pre></td></tr></table></figure></li>
<li>NMFを実装します. 引数にはNMFする(numpyでmatrix化した)特徴行列, 因子の数, 乗法的更新ルールで更新する回数を与えます. なお, ここで与える因子の数が全文書から抽出したいトピックの数になります. <figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">def factorize(v,pc=<span class="number">10</span>,iter=<span class="number">50</span>):</span><br><span class="line">        ic=shape(v)[<span class="number">0</span>]  # vの行数</span><br><span class="line">        fc=shape(v)[<span class="number">1</span>]  # vの列数</span><br><span class="line"></span><br><span class="line">        # 重みの行列(w)と特徴の行列(h)をランダムな値で初期化</span><br><span class="line">        w=<span class="built_in">matrix</span>([[<span class="built_in">random</span>.<span class="built_in">random</span>() <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(pc)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(ic)])</span><br><span class="line">        h=<span class="built_in">matrix</span>([[<span class="built_in">random</span>.<span class="built_in">random</span>() <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(fc)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(pc)])</span><br><span class="line"></span><br><span class="line">        # 乗法的更新ルール. iter回繰り返す</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(iter):</span><br><span class="line">                wh=w*h</span><br><span class="line"></span><br><span class="line">                # 残差平方和の計算</span><br><span class="line">                cost=difcost(v,wh)</span><br><span class="line">                # <span class="number">10</span>回ごとに残差平方和を表示</span><br><span class="line">                <span class="keyword">if</span> i%<span class="number">10</span>==<span class="number">0</span>: <span class="built_in">print</span> cost</span><br><span class="line">                # 行列が完全に因子分解されたら終了</span><br><span class="line">                <span class="keyword">if</span> cost==<span class="number">0</span>: <span class="built_in">break</span></span><br><span class="line"></span><br><span class="line">                # 特徴重みの行列を更新</span><br><span class="line">                hn=(<span class="built_in">transpose</span>(w)*v)</span><br><span class="line">                hd=(<span class="built_in">transpose</span>(w)*w*h)</span><br><span class="line">                h=<span class="built_in">matrix</span>(<span class="built_in">array</span>(h)*<span class="built_in">array</span>(hn)/<span class="built_in">array</span>(hd))</span><br><span class="line"></span><br><span class="line">                # 基底行列を更新</span><br><span class="line">                wn=(v*<span class="built_in">transpose</span>(h))</span><br><span class="line">                wd=(w*h*<span class="built_in">transpose</span>(h))</span><br><span class="line">                ## 実行時にエラー(RuntimeWarning: invalid value encountered <span class="keyword">in</span> <span class="built_in">divide</span>)が出るなら</span><br><span class="line">                #wd = [[<span class="number">1e-20</span> <span class="keyword">if</span> (x - <span class="number">1e-20</span> &lt; <span class="number">0</span>) <span class="keyword">else</span> x <span class="keyword">for</span> x <span class="keyword">in</span> lst] <span class="keyword">for</span> lst <span class="keyword">in</span> wd.tolist()]</span><br><span class="line">                w=<span class="built_in">matrix</span>(<span class="built_in">array</span>(w)*<span class="built_in">array</span>(wn)/<span class="built_in">array</span>(wd))</span><br><span class="line"></span><br><span class="line">        <span class="built_in">return</span> w,h</span><br></pre></td></tr></table></figure></li>
<li>上記コードによって生成されるのは基底行列と特徴重みの行列なので, 抽出したトピックを見やすい形式で表示する&amp;ファイルに書き出すプログラムを用意します.<br>このプログラムにより, 抽出したトピック(トピックにおいて出現確率が高い特徴単語6個)と, そのトピックを持つ文書上位3件を表示&amp;書き出します.<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">def showfeatures(w,<span class="keyword">h</span>,titles,wordvec,<span class="keyword">out</span>='features.txt'):</span><br><span class="line">    with <span class="keyword">open</span>(<span class="keyword">out</span>, <span class="string">"w"</span>) <span class="keyword">as</span> <span class="keyword">outfile</span>:</span><br><span class="line">        pc,wc=shape(<span class="keyword">h</span>)</span><br><span class="line">        toppatterns=[[] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="keyword">range</span>(len(titles))]</span><br><span class="line">        patternnames=[]</span><br><span class="line"></span><br><span class="line">        # 因子数分繰り返し</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="keyword">range</span>(pc):</span><br><span class="line">            slist=[]</span><br><span class="line">            # 単語とその重みのリストを作る</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="keyword">range</span>(wc):</span><br><span class="line">                slist.<span class="keyword">append</span>((<span class="keyword">h</span>[i,j],wordvec[j]))</span><br><span class="line">            # 単語のリストを降順に並び替え</span><br><span class="line">            slist.<span class="keyword">sort</span>()</span><br><span class="line">            slist.<span class="built_in">reverse</span>()</span><br><span class="line"></span><br><span class="line">            # 上位6つの要素(特徴語)を出力</span><br><span class="line">            <span class="keyword">n</span>=[s[1] <span class="keyword">for</span> s <span class="keyword">in</span> slist[0:6]]</span><br><span class="line">            <span class="keyword">outfile</span>.write(str(<span class="keyword">n</span>)+'\<span class="keyword">n</span>')</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"トピック"</span> + str(i+1) + <span class="string">": "</span>,</span><br><span class="line">            <span class="keyword">for</span> hoge <span class="keyword">in</span> <span class="keyword">n</span>:</span><br><span class="line">                <span class="keyword">print</span> hoge,</span><br><span class="line">            <span class="keyword">print</span> <span class="string">""</span></span><br><span class="line">            patternnames.<span class="keyword">append</span>(<span class="keyword">n</span>)</span><br><span class="line"></span><br><span class="line">            # 当該特徴を持つ文書のリストを作る</span><br><span class="line">            <span class="keyword">flist</span>=[]</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="keyword">range</span>(len(titles)):</span><br><span class="line">                # 該当する重みに対応する文書タイトルを重みに結合</span><br><span class="line">                <span class="keyword">flist</span>.<span class="keyword">append</span>((w[j,i],titles[j]))</span><br><span class="line">                toppatterns[j].<span class="keyword">append</span>((w[j,i],i,titles[j]))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">flist</span>.<span class="keyword">sort</span>()</span><br><span class="line">            <span class="keyword">flist</span>.<span class="built_in">reverse</span>()</span><br><span class="line"></span><br><span class="line">            # 上位3つの文書を表示</span><br><span class="line">            <span class="keyword">for</span> f <span class="keyword">in</span> <span class="keyword">flist</span>[0:3]:</span><br><span class="line">                <span class="keyword">outfile</span>.write(str(f)+'\<span class="keyword">n</span>')</span><br><span class="line">                <span class="keyword">for</span> hoge <span class="keyword">in</span> f:</span><br><span class="line">                    <span class="keyword">print</span> hoge,</span><br><span class="line">                <span class="keyword">print</span> <span class="string">""</span></span><br><span class="line">            <span class="keyword">outfile</span>.write('\<span class="keyword">n</span>')</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> toppatterns,patternnames</span><br></pre></td></tr></table></figure></li>
<li>実際に, 特徴行列にNMFを適用して得られるトピックを確認してみます. なお, 因子数を20個, イテレーション数を50回としました. <figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="keyword">import</span> nmf</span><br><span class="line">&gt;&gt;&gt; v=matrix(wordmatrix)</span><br><span class="line">&gt;&gt;&gt; weights,feat=nmf.factorize(v,pc=<span class="number">20</span>,iter=<span class="number">50</span>)</span><br><span class="line"><span class="number">4644026.99428</span></span><br><span class="line"><span class="number">6276.23883311</span></span><br><span class="line"><span class="number">6106.81822625</span></span><br><span class="line"><span class="number">6076.58094169</span></span><br><span class="line"><span class="number">6064.71184922</span></span><br><span class="line">&gt;&gt;&gt; topp,pn=nmf.showfeatures(weights,feat,artt,wordvec)</span><br><span class="line">トピック<span class="number">1</span>:  メーカー 特徴 家 大手 マリオ 住宅 </span><br><span class="line"><span class="number">15.4663497597</span> ヒーターのメーカー別の特徴 </span><br><span class="line"><span class="number">13.3104830612</span> ゲーム業界から見たスーパーマリオメーカー問題 </span><br><span class="line"><span class="number">13.2819191304</span> 似て非なる大手住宅メーカー<span class="number">10</span>社の特徴まとめ【<span class="number">2016</span>年版】 </span><br><span class="line">トピック<span class="number">2</span>:  ポイント 楽天 現金 方法 ネット スーパー </span><br><span class="line"><span class="number">19.7595240853</span> 無印良品で楽天スーパーポイントやTポイントを貯める </span><br><span class="line"><span class="number">16.7933330305</span> ポイント交換手数料がかからずに現金化する方法とは？ </span><br><span class="line"><span class="number">13.6775064617</span> Amazonの買い物で<span class="number">2</span>つのポイントを貯める！ </span><br><span class="line">トピック<span class="number">3</span>:  カード ドコモ 利用 クレジットカード サービス メイン </span><br><span class="line"><span class="number">22.0895104043</span> dポイントカードは持っていたほうが良い？ </span><br><span class="line"><span class="number">17.0282753695</span> クレジットカード、<span class="number">2</span>枚目はこうやって選べ！ </span><br><span class="line"><span class="number">14.0005808073</span> まだまだあるdカード・dカード GOLDの魅力とは？ </span><br><span class="line">トピック<span class="number">4</span>:  人 口内 口 トラブル 環境 悪化 </span><br><span class="line"><span class="number">23.2705036456</span> 口臭や口内炎、原因は口内環境の悪化？ケアして解消 </span><br><span class="line"><span class="number">20.316718056</span> 全身の健康は口から　口臭を「クマ笹歯みがき」で予防 </span><br><span class="line"><span class="number">6.55166834564</span> 頭皮のかゆみ…くりかえす原因は常在菌による炎症？ </span><br><span class="line">トピック<span class="number">5</span>:  紹介 方法 iphone 機能 今回 ダイエット </span><br><span class="line"><span class="number">11.9575251978</span> iPhoneで着信時に通知ランプを点滅させる方法 </span><br><span class="line"><span class="number">10.3358206124</span> 機能豊富なiPhoneのカメラアプリを使いこなそう </span><br><span class="line"><span class="number">10.1530091745</span> iPhone標準ブラウザ「Safari」の便利機能<span class="number">10</span>選 </span><br><span class="line">トピック<span class="number">6</span>:  対策 指輪 雪 女性 試験 男性 </span><br><span class="line"><span class="number">15.9903054461</span> 都心で雪が降る日に慌てないようやっておくべき全対策 </span><br><span class="line"><span class="number">12.2442409343</span> 既婚者なのに結婚指輪をつけない男性のホンネと対策 </span><br><span class="line"><span class="number">8.33584814286</span> 便秘太りさん必見、原因別の「腸活」便秘対策法 </span><br><span class="line">トピック<span class="number">7</span>:  将棋 愛 ガイド 登場 宴会 シーン </span><br><span class="line"><span class="number">19.9652514536</span> 将棋ファン感涙！将棋シーンが登場する漫画<span class="number">10</span>選 </span><br><span class="line"><span class="number">14.6345881045</span> 愛棋家ぶらり旅ガイド(<span class="number">1</span>)別府・将棋処「と」 </span><br><span class="line"><span class="number">14.2962735508</span> 愛棋家のための宴会ソング-将棋替え歌・キュート編 </span><br><span class="line">トピック<span class="number">8</span>:  子ども 薬 親 問題 ストレス 受験 </span><br><span class="line"><span class="number">19.6893953432</span> 子どもの将来を受験で潰さないために…親の心得と接し方 </span><br><span class="line"><span class="number">17.960475885</span> アイスやジュースはNG！薬を嫌がる子供への飲ませ方 </span><br><span class="line"><span class="number">15.0014403268</span> 子どもを薬嫌いにさせないための「服薬補助ゼリー」 </span><br><span class="line">トピック<span class="number">9</span>:  ヨガ ポーズ 人 犬 効果 下 </span><br><span class="line"><span class="number">24.9219551555</span> 基本のヨガポーズをマスター！下を向いた犬のポーズ </span><br><span class="line"><span class="number">15.0087767171</span> まずはココから！自宅でできる初心者向けのヨガポーズ </span><br><span class="line"><span class="number">11.0473594218</span> 初心者でも簡単!?「空中ヨガ」で新感覚エクササイズ </span><br><span class="line">トピック<span class="number">10</span>:  体 幹 トレーニング メニュー 基本 効果 </span><br><span class="line"><span class="number">34.4317754799</span> 体幹トレーニングの基本<span class="number">5</span>メニューで、劇的に体型を変える！ </span><br><span class="line"><span class="number">14.7631212143</span> 冬太り撃退に！体幹トレーニング「レッグバランス」 </span><br><span class="line"><span class="number">13.7327354842</span> 【動画】<span class="number">1</span>分で簡単！効果絶大な体幹トレーニング<span class="number">3</span>選 </span><br><span class="line">トピック<span class="number">11</span>:  人気 パン カフェ コーヒー 栃木 中古 </span><br><span class="line"><span class="number">13.7362428489</span> 栃木を訪れたら絶対食べたい！ 地元で愛される人気パン<span class="number">6</span>選 </span><br><span class="line"><span class="number">12.6581465276</span> 【中古車】ルパンにも登場した人気の名車<span class="number">6</span>選【自動車】 </span><br><span class="line"><span class="number">10.5455508799</span> 人気のフィアット<span class="number">500</span>が新車時の半額以下に！ </span><br><span class="line">トピック<span class="number">12</span>:  紹介 今回 日本 月 金沢 五輪 </span><br><span class="line"><span class="number">11.911419134</span> ルーペで味わい尽くす！凹版切手の魅力 </span><br><span class="line"><span class="number">11.4798284003</span> 贈って喜ばれる！金沢っ子おすすめの新おいしいお土産 </span><br><span class="line"><span class="number">11.0113306297</span> これぞ日本の美！奥の細道シリーズの魅力に迫る！ </span><br><span class="line">トピック<span class="number">13</span>:  チョコ バレンタイン 褒美 自分 ショコラ チョコレート </span><br><span class="line"><span class="number">22.566436019</span> スリーエフのバレンタイン<span class="number">2016</span>！ご褒美チョコ＆感謝チョコ厳選<span class="number">5</span> </span><br><span class="line"><span class="number">19.0753834192</span> ファミマのバレンタイン<span class="number">2016</span>！あの人気店の味＆本格チョコ厳選<span class="number">7</span> </span><br><span class="line"><span class="number">17.9912005562</span> 自分へのご褒美チョコレート<span class="number">2016</span>厳選バレンタイン </span><br><span class="line">トピック<span class="number">14</span>:  プレート ホット 鍋 グリル 方式 選び方 </span><br><span class="line"><span class="number">19.1341121925</span> ホットプレートとグリル鍋の違い </span><br><span class="line"><span class="number">18.6032897757</span> ホットプレート・グリル鍋のメーカー別特徴 </span><br><span class="line"><span class="number">14.5889482845</span> ホットプレート・グリル鍋の加熱方式 </span><br><span class="line">トピック<span class="number">15</span>:  木 魅力 街 プロ 紹介 場所 </span><br><span class="line"><span class="number">37.0109893407</span> 街に暮らしにもっと木を！木のプロが語る「木化」とは </span><br><span class="line"><span class="number">4.33374555819</span> 自然豊かな表情が魅力の「国産ナラ材」 </span><br><span class="line"><span class="number">2.98959349923</span> プロは楽して踊っていると言う事実 </span><br><span class="line">トピック<span class="number">16</span>:  住宅 建築 設計 事務所 経験 現在 </span><br><span class="line"><span class="number">21.6811595627</span> 納谷学+納谷新［納谷建築設計事務所］ </span><br><span class="line"><span class="number">16.2771733003</span> 岸本和彦［acaa建築研究所］ </span><br><span class="line"><span class="number">14.5906325228</span> ヴィンテージ住宅のリノベーション［井の頭の住宅］ </span><br><span class="line">トピック<span class="number">17</span>:  猫 目 映画 今回 理由 妊娠 </span><br><span class="line"><span class="number">19.7927332553</span> 猫の目を見つめてはダメ？ </span><br><span class="line"><span class="number">18.6993266635</span> 猫が帰って来ない!?迷い猫の探し方 </span><br><span class="line"><span class="number">16.6343533117</span> 立つ猫――猫が二本足になる理由って？ </span><br><span class="line">トピック<span class="number">18</span>:  塾 選び 受験 チェックポイント 中学生 失敗 </span><br><span class="line"><span class="number">24.2675675159</span> 塾選び、個別指導塾の盲点とチェックポイント </span><br><span class="line"><span class="number">21.8312760412</span> 失敗しない塾選び、<span class="number">7</span>つのポイント </span><br><span class="line"><span class="number">14.4755082856</span> 意外な盲点に注意！中学生の塾選びのポイント </span><br><span class="line">トピック<span class="number">19</span>:  冬 雪見 露天風呂 温泉 紹介 季節 </span><br><span class="line"><span class="number">23.088694487</span> 冬の温泉旅におすすめ！関東周辺の雪見露天風呂<span class="number">10</span>選 </span><br><span class="line"><span class="number">17.645473759</span> 脱・冬太り！スッキリボディを手に入れる冬太りストップダイエット </span><br><span class="line"><span class="number">13.3875534695</span> 美肌効果も期待大！ 東京から行ける雪見露天<span class="number">5</span>選 </span><br><span class="line">トピック<span class="number">20</span>:  トレンド 春 夏 ファッション 厳選 キーワード </span><br><span class="line"><span class="number">16.0910792269</span> <span class="number">2016</span>春夏トレンド<span class="number">5</span>「ランジェリーエッセンス」 </span><br><span class="line"><span class="number">14.6996582741</span> <span class="number">2016</span>春夏トレンド<span class="number">6</span>「モダンオールディーズ」 </span><br><span class="line"><span class="number">14.5019972252</span> <span class="number">2016</span>春夏トレンド<span class="number">4</span>「リーンエフォートレス」</span><br></pre></td></tr></table></figure>
指定した因子数20個分のトピックと, それを最も表現する特徴単語(そのトピックにおいて出現確率が高い単語 = 共起する単語), およびそのトピックを持つ文書を1トピックにつき上位3件表示しました. なお, プログラムと同階層に結果を書き出したファイルfeatures.txtが生成されます. </li>
</ol>
<p>結果を見ると, それぞれのトピック(各トピックにおいて出現確率が最も高い単語)ごとに関連した単語が抽出できていることが確認できます. 特にトピック13の「チョコ」なんかは, 「バレンタイン 褒美 自分 ショコラ チョコレート」のように, チョコととても関係の深い単語が抽出できていることがわかります.</p>
<p>さらに, そのトピックを持つ上位3件の文書を実際に確認したところ, トピック13のチョコにおいては, 「スリーエフのバレンタイン2016！ご褒美チョコ＆感謝チョコ厳選5 」「ファミマのバレンタイン2016！あの人気店の味＆本格チョコ厳選7 」「自分へのご褒美チョコレート2016厳選バレンタイン」の全てが, まさにチョコな記事でした. </p>
<p>最後に, 各文書が持つ潜在的なトピックを確認します. 下記コードでは, 各文書に潜在するトピックの上位3つを表示するとともに, 結果をファイルに書き出します. </p>
<figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">def showarticles(titles,toppatterns,patternnames,out=<span class="string">'article.txt'</span>):</span><br><span class="line">    with open(out,<span class="string">'w'</span>) as outfile:</span><br><span class="line"></span><br><span class="line">        # 全文書について</span><br><span class="line">        for j in range(len(titles)):</span><br><span class="line">            outfile.write(titles[j].encode(<span class="string">'utf8'</span>)+<span class="string">'\n'</span>)</span><br><span class="line">            print <span class="string">"-----"</span> + str(j+<span class="number">1</span>) + <span class="string">"-----"</span> + <span class="string">"\n"</span> + titles[j] + <span class="string">"\n"</span></span><br><span class="line"></span><br><span class="line">            # この文書の特徴たちを取得しソートする</span><br><span class="line">            toppatterns[j].sort()</span><br><span class="line">            toppatterns[j].reverse()</span><br><span class="line"></span><br><span class="line">            # 上位<span class="number">3</span>トピックを出力する</span><br><span class="line">            for i in range(<span class="number">3</span>):</span><br><span class="line">                outfile.write(str(toppatterns[j][i][<span class="number">0</span>])+<span class="string">' '</span>+str(patternnames[toppatterns[j][i][<span class="number">1</span>]])+<span class="string">'\n'</span>)</span><br><span class="line">                print <span class="string">"トピック"</span> + str(i+<span class="number">1</span>) + <span class="string">": "</span>,</span><br><span class="line">                for hoge in patternnames[toppatterns[j][i][<span class="number">1</span>]]:</span><br><span class="line">                    print hoge,</span><br><span class="line">                print <span class="string">""</span></span><br><span class="line"></span><br><span class="line">            outfile.write(<span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure>
<p>それでは実行してみます. </p>
<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; nmf.showarticles(artt,topp,pn)</span><br><span class="line">----<span class="number">-1</span>-----</span><br><span class="line">肝臓疾患に効果を持つ唯一のロングセラー市販薬</span><br><span class="line"></span><br><span class="line">トピック<span class="number">1</span>:  子ども 薬 親 問題 ストレス 受験 </span><br><span class="line">トピック<span class="number">2</span>:  対策 指輪 雪 女性 試験 男性 </span><br><span class="line">トピック<span class="number">3</span>:  チョコ バレンタイン 褒美 自分 ショコラ チョコレート </span><br><span class="line">----<span class="number">-2</span>-----</span><br><span class="line">二日酔い対策の隠れたベストセラー市販薬「五苓散」</span><br><span class="line"></span><br><span class="line">トピック<span class="number">1</span>:  対策 指輪 雪 女性 試験 男性 </span><br><span class="line">トピック<span class="number">2</span>:  住宅 建築 設計 事務所 経験 現在 </span><br><span class="line">トピック<span class="number">3</span>:  人 口内 口 トラブル 環境 悪化 </span><br><span class="line">----<span class="number">-3</span>-----</span><br><span class="line">頭皮のかゆみ…くりかえす原因は常在菌による炎症？</span><br><span class="line"></span><br><span class="line">トピック<span class="number">1</span>:  人 口内 口 トラブル 環境 悪化 </span><br><span class="line">トピック<span class="number">2</span>:  住宅 建築 設計 事務所 経験 現在 </span><br><span class="line">トピック<span class="number">3</span>:  子ども 薬 親 問題 ストレス 受験 </span><br><span class="line">----<span class="number">-4</span>-----</span><br><span class="line">赤ちゃんから大人まで骨の健康に不可欠なビタミンD</span><br><span class="line"></span><br><span class="line">トピック<span class="number">1</span>:  紹介 方法 iphone 機能 今回 ダイエット </span><br><span class="line">トピック<span class="number">2</span>:  紹介 今回 日本 月 金沢 五輪 </span><br><span class="line">トピック<span class="number">3</span>:  子ども 薬 親 問題 ストレス 受験 </span><br><span class="line">----<span class="number">-5</span>-----</span><br><span class="line">飲みにくい薬は「ゼリーの力」で解決を！</span><br><span class="line"></span><br><span class="line">トピック<span class="number">1</span>:  子ども 薬 親 問題 ストレス 受験 </span><br><span class="line">トピック<span class="number">2</span>:  紹介 方法 iphone 機能 今回 ダイエット </span><br><span class="line">トピック<span class="number">3</span>:  ヨガ ポーズ 人 犬 効果 下 </span><br><span class="line">----<span class="number">-6</span>-----</span><br><span class="line">大事なプレゼン前に「声」が出ない、さあどうする？</span><br><span class="line"></span><br><span class="line">トピック<span class="number">1</span>:  紹介 方法 iphone 機能 今回 ダイエット </span><br><span class="line">トピック<span class="number">2</span>:  木 魅力 街 プロ 紹介 場所 </span><br><span class="line">トピック<span class="number">3</span>:  猫 目 映画 今回 理由 妊娠 </span><br><span class="line">----<span class="number">-7</span>-----</span><br><span class="line">すっきりしない胃の不調は「健胃」と「制酸」で治す！</span><br><span class="line"></span><br><span class="line">トピック<span class="number">1</span>:  トレンド 春 夏 ファッション 厳選 キーワード </span><br><span class="line">トピック<span class="number">2</span>:  人 口内 口 トラブル 環境 悪化 </span><br><span class="line">トピック<span class="number">3</span>:  チョコ バレンタイン 褒美 自分 ショコラ チョコレート </span><br><span class="line">----<span class="number">-8</span>-----</span><br><span class="line">子どもを薬嫌いにさせないための「服薬補助ゼリー」</span><br><span class="line"></span><br><span class="line">トピック<span class="number">1</span>:  子ども 薬 親 問題 ストレス 受験 </span><br><span class="line">トピック<span class="number">2</span>:  人 口内 口 トラブル 環境 悪化 </span><br><span class="line">トピック<span class="number">3</span>:  ヨガ ポーズ 人 犬 効果 下 </span><br><span class="line">----<span class="number">-9</span>-----</span><br><span class="line">全身の健康は口から　口臭を「クマ笹歯みがき」で予防</span><br><span class="line"></span><br><span class="line">トピック<span class="number">1</span>:  人 口内 口 トラブル 環境 悪化 </span><br><span class="line">トピック<span class="number">2</span>:  紹介 方法 iphone 機能 今回 ダイエット </span><br><span class="line">トピック<span class="number">3</span>:  チョコ バレンタイン 褒美 自分 ショコラ チョコレート </span><br><span class="line">----<span class="number">-10</span>-----</span><br><span class="line">胃腸薬「百草丸」が粘膜修復成分をプラスして新登場</span><br><span class="line"></span><br><span class="line">トピック<span class="number">1</span>:  将棋 愛 ガイド 登場 宴会 シーン </span><br><span class="line">トピック<span class="number">2</span>:  紹介 方法 iphone 機能 今回 ダイエット </span><br><span class="line">トピック<span class="number">3</span>:  人 口内 口 トラブル 環境 悪化 </span><br><span class="line">----<span class="number">-11</span>-----</span><br><span class="line">ストレスからくる下痢…その原因と対処法は？</span><br><span class="line"></span><br><span class="line">トピック<span class="number">1</span>:  子ども 薬 親 問題 ストレス 受験 </span><br><span class="line">トピック<span class="number">2</span>:  人 口内 口 トラブル 環境 悪化 </span><br><span class="line">トピック<span class="number">3</span>:  塾 選び 受験 チェックポイント 中学生 失敗 </span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">----<span class="number">-328</span>-----</span><br><span class="line"><span class="number">2016</span>年は、こうして占いを使いこなす！</span><br><span class="line"></span><br><span class="line">トピック<span class="number">1</span>:  塾 選び 受験 チェックポイント 中学生 失敗 </span><br><span class="line">トピック<span class="number">2</span>:  ヨガ ポーズ 人 犬 効果 下 </span><br><span class="line">トピック<span class="number">3</span>:  トレンド 春 夏 ファッション 厳選 キーワード </span><br><span class="line">----<span class="number">-329</span>-----</span><br><span class="line">けっこう身近にある感動、東京<span class="number">23</span>区内で見られる「絶景スポット」</span><br><span class="line"></span><br><span class="line">トピック<span class="number">1</span>:  紹介 今回 日本 月 金沢 五輪 </span><br><span class="line">トピック<span class="number">2</span>:  紹介 方法 iphone 機能 今回 ダイエット </span><br><span class="line">トピック<span class="number">3</span>:  冬 雪見 露天風呂 温泉 紹介 季節 </span><br><span class="line">----<span class="number">-330</span>-----</span><br><span class="line"><span class="number">2015</span>D1グランプリ 「UP GARAGE」</span><br><span class="line"></span><br><span class="line">トピック<span class="number">1</span>:  対策 指輪 雪 女性 試験 男性 </span><br><span class="line">トピック<span class="number">2</span>:  子ども 薬 親 問題 ストレス 受験 </span><br><span class="line">トピック<span class="number">3</span>:  体 幹 トレーニング メニュー 基本 効果 </span><br><span class="line">----<span class="number">-331</span>-----</span><br><span class="line"><span class="number">2015</span>D1グランプリ 「GOOD YEAR」</span><br><span class="line"></span><br><span class="line">トピック<span class="number">1</span>:  紹介 今回 日本 月 金沢 五輪 </span><br><span class="line">トピック<span class="number">2</span>:  対策 指輪 雪 女性 試験 男性 </span><br><span class="line">トピック<span class="number">3</span>:  チョコ バレンタイン 褒美 自分 ショコラ チョコレート </span><br><span class="line">----<span class="number">-332</span>-----</span><br><span class="line">役所に社食……「え、ここ一般人も入っていいの？」なグルメスポット</span><br><span class="line"></span><br><span class="line">トピック<span class="number">1</span>:  紹介 今回 日本 月 金沢 五輪 </span><br><span class="line">トピック<span class="number">2</span>:  紹介 方法 iphone 機能 今回 ダイエット </span><br><span class="line">トピック<span class="number">3</span>:  木 魅力 街 プロ 紹介 場所 </span><br><span class="line">----<span class="number">-333</span>-----</span><br><span class="line">「<span class="number">2016</span>DGRQ」はこの娘たち！</span><br><span class="line"></span><br><span class="line">トピック<span class="number">1</span>:  チョコ バレンタイン 褒美 自分 ショコラ チョコレート </span><br><span class="line">トピック<span class="number">2</span>:  ヨガ ポーズ 人 犬 効果 下 </span><br><span class="line">トピック<span class="number">3</span>:  猫 目 映画 今回 理由 妊娠 </span><br><span class="line">----<span class="number">-334</span>-----</span><br><span class="line">どこよりも美味いコロッケがある本郷菊坂でグルメ散歩</span><br><span class="line"></span><br><span class="line">トピック<span class="number">1</span>:  ヨガ ポーズ 人 犬 効果 下 </span><br><span class="line">トピック<span class="number">2</span>:  木 魅力 街 プロ 紹介 場所 </span><br><span class="line">トピック<span class="number">3</span>:  人 口内 口 トラブル 環境 悪化 </span><br><span class="line">----<span class="number">-335</span>-----</span><br><span class="line"><span class="number">2016</span>年「RAYBRIG レースクイーン」はこの娘たち！</span><br><span class="line"></span><br><span class="line">トピック<span class="number">1</span>:  紹介 今回 日本 月 金沢 五輪 </span><br><span class="line">トピック<span class="number">2</span>:  冬 雪見 露天風呂 温泉 紹介 季節 </span><br><span class="line">トピック<span class="number">3</span>:  塾 選び 受験 チェックポイント 中学生 失敗 </span><br><span class="line">----<span class="number">-336</span>-----</span><br><span class="line">「東京オートサロン<span class="number">2016</span>」コンパニオン速報第<span class="number">2</span>弾</span><br><span class="line"></span><br><span class="line">トピック<span class="number">1</span>:  紹介 今回 日本 月 金沢 五輪 </span><br><span class="line">トピック<span class="number">2</span>:  紹介 方法 iphone 機能 今回 ダイエット </span><br><span class="line">トピック<span class="number">3</span>:  チョコ バレンタイン 褒美 自分 ショコラ チョコレート </span><br><span class="line">----<span class="number">-337</span>-----</span><br><span class="line">「東京オートサロン<span class="number">2016</span>」コンパニオン速報第<span class="number">1</span>弾</span><br><span class="line"></span><br><span class="line">トピック<span class="number">1</span>:  紹介 今回 日本 月 金沢 五輪 </span><br><span class="line">トピック<span class="number">2</span>:  紹介 方法 iphone 機能 今回 ダイエット </span><br><span class="line">トピック<span class="number">3</span>:  チョコ バレンタイン 褒美 自分 ショコラ チョコレート </span><br><span class="line">----<span class="number">-338</span>-----</span><br><span class="line">オムライスのある昔ながらの喫茶店を探して歩く</span><br><span class="line"></span><br><span class="line">トピック<span class="number">1</span>:  木 魅力 街 プロ 紹介 場所 </span><br><span class="line">トピック<span class="number">2</span>:  チョコ バレンタイン 褒美 自分 ショコラ チョコレート </span><br><span class="line">トピック<span class="number">3</span>:  子ども 薬 親 問題 ストレス 受験 </span><br><span class="line">----<span class="number">-339</span>-----</span><br><span class="line">ルーペで味わい尽くす！凹版切手の魅力</span><br><span class="line"></span><br><span class="line">トピック<span class="number">1</span>:  紹介 今回 日本 月 金沢 五輪 </span><br><span class="line">トピック<span class="number">2</span>:  ポイント 楽天 現金 方法 ネット スーパー </span><br><span class="line">トピック<span class="number">3</span>:  住宅 建築 設計 事務所 経験 現在 </span><br><span class="line">----<span class="number">-340</span>-----</span><br><span class="line">東京から日帰りで行ける、無料でも十分に楽しめる見学施設</span><br><span class="line"></span><br><span class="line">トピック<span class="number">1</span>:  人気 パン カフェ コーヒー 栃木 中古 </span><br><span class="line">トピック<span class="number">2</span>:  冬 雪見 露天風呂 温泉 紹介 季節 </span><br><span class="line">トピック<span class="number">3</span>:  紹介 今回 日本 月 金沢 五輪</span><br></pre></td></tr></table></figure>
<p>全文書(340記事)について, 各文書の持つ潜在的なトピック上位3つを表示しました. なお, プログラムと同階層に結果を書き出したファイルarticle.txtが生成されます. </p>
<p>実際に, 340個目の文書「東京から日帰りで行ける、無料でも十分に楽しめる見学施設」を確認したところ, 抽出されたトピック通り, 「冬」に行って楽しめる「人気」の施設を「紹介」している記事でした. トピックをうまく抽出できているようです. 文書の持つ話題を的確に捉えていることが確認できました. </p>
<p>それではNMFの実装コードをまとめたファイルも<a href="https://github.com/camberbridge/camberbridge.github.io/blob/master/assets/sources/nmf.py" target="_blank" rel="noopener">GitHub</a>にあげておきます. </p>
<h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事ではトピックモデルの一種であるLSAを用いることによって, 多くのニュース記事から話題になっているトピックを抽出しました. また, 各文書が持つ潜在的な話題の抽出も行いました.</p>
<p>結果より, 文書が持つ話題を的確に抽出していることが確認できましたが, 「紹介」というトピックや, トピックにおいて出現確率の高い単語として「今回」「現在」のような副詞可能単語を確認しました. これらの単語は一般性が高いため, その文書を特徴づける単語としては適切ではありません. ゆえに, 文書の特徴の把握が難しくなります. したがって, 形態素解析によって形態素単位で分かち書きする処理の過程において, 「サ変接続」と「副詞可能」な単語も除外することによって, 把握が比較的容易なトピックの抽出が行えます. </p>
<h3 id="補足"><a href="#補足" class="headerlink" title="補足"></a>補足</h3><p>本記事では各トピックにおける出現確率の高い6個の単語の中で, 確率が最も高い単語をトピックであるかのように扱いましたが, 正しくはこの単語6個すべてが1つのトピック(話題のクラスタ)であり, そして話題クラスタごとに関連した単語が6個抽出されている状態です. </p>
<p>実際のところ, この話題クラスタが”何のトピック”であるかの決定は, 本人の裁量で行うができます. したがって, 本記事では話題クラスタの中で出現確率が最も高い単語をトピックとしました.<br>この辺りの話については, <a href="http://www.amazon.co.jp/dp/4774137073?tag=chiharunosite-22" target="_blank" rel="noopener">アイスクリーム屋さんで統計学がわかる -回帰分析・因子分析編- </a>が分かりやすいので, 一読することをすすめます. </p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li>岩田具治. “<a href="http://www.kspub.co.jp/book/detail/1529045.html" target="_blank" rel="noopener">トピックモデル</a>“. 2015.</li>
<li>Toby Segaran. “<a href="https://www.oreilly.co.jp/books/9784873113647/" target="_blank" rel="noopener">集合知プログラミング</a>“. 2008.</li>
</ul>
<p>トピックモデルの基本についてはトピックモデルの4章を参考にしました. 実装には集合知プログラミングの10章を参考にしました. </p>
<p>最後に, トピックモデルについてまとめたスライド集(<a href="http://blog.albert2005.co.jp/2015/09/15/topicmodel-study/" target="_blank" rel="noopener">ALBERT Official Blog -『トピックモデルによる統計的潜在意味解析』読書会を開催中です</a>)を見つけたのでリンクしておきます. </p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>トピックモデルとは, 文書集合から特徴(話題)を抽出する手法です. また, それぞれの文書が持つ話題を抽出したり, 文書間の類似性を抽出する]]>
    </summary>
    
      <category term="トピックモデル" scheme="https://camberbridge.github.io/tags/%E3%83%88%E3%83%94%E3%83%83%E3%82%AF%E3%83%A2%E3%83%87%E3%83%AB/"/>
    
      <category term="潜在意味解析" scheme="https://camberbridge.github.io/tags/%E6%BD%9C%E5%9C%A8%E6%84%8F%E5%91%B3%E8%A7%A3%E6%9E%90/"/>
    
      <category term="LSA" scheme="https://camberbridge.github.io/tags/LSA/"/>
    
      <category term="非負値行列因子分解" scheme="https://camberbridge.github.io/tags/%E9%9D%9E%E8%B2%A0%E5%80%A4%E8%A1%8C%E5%88%97%E5%9B%A0%E5%AD%90%E5%88%86%E8%A7%A3/"/>
    
      <category term="NMF" scheme="https://camberbridge.github.io/tags/NMF/"/>
    
      <category term="janome" scheme="https://camberbridge.github.io/tags/janome/"/>
    
      <category term="形態素解析" scheme="https://camberbridge.github.io/tags/%E5%BD%A2%E6%85%8B%E7%B4%A0%E8%A7%A3%E6%9E%90/"/>
    
      <category term="python" scheme="https://camberbridge.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[テレビ朝日のインターンシップでインターンネットしてきた]]></title>
    <link href="https://camberbridge.github.io/2016/02/05/%E3%83%86%E3%83%AC%E3%83%93%E6%9C%9D%E6%97%A5%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%83%E3%83%97%E3%81%A7%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%B3%E3%83%8D%E3%83%83%E3%83%88%E3%81%97%E3%81%A6%E3%81%8D%E3%81%9F/"/>
    <id>https://camberbridge.github.io/2016/02/05/テレビ朝日のインターンシップでインターンネットしてきた/</id>
    <published>2016-02-05T02:21:24.000Z</published>
    <updated>2016-02-05T06:57:49.000Z</updated>
    <content type="html"><![CDATA[<p>9月の下旬からつい1週間くらい前まで、テレビ朝日の総合ビジネス局でインターンシップをしていました。<br>そこで今回は、テレビ朝日のインターンシップについて自分の感想を交えながら説明したいと思います。これで来年多くの応募があれば幸いです。</p>
<hr>
<h2 id="インターンネット概要"><a href="#インターンネット概要" class="headerlink" title="インターンネット概要"></a>インターンネット概要</h2><p><a href="https://saiyo.tv-asahi.co.jp/2017/contents/event/intern.html" target="_blank" rel="noopener">インターンネット</a>とは、現場で実際に行われているWebビジネスに携わることができるテレビ朝日のインターンシップで、今年が初めての試みのようです。自分が調べた限りでは、テレビ放送局が行うインターンで「テレビ×Web」の仕事を<strong>実際に経験</strong>させてくれるのはここしかないと思います。<br>また、このインターンなんと、<strong>賞金(予算)として1,000,000円</strong>が与えられます。これも他では無いでしょう。</p>
<p>まとめると、このインターンネットは、1,000,000円の予算でWebサービスを作る活動のことです。<br>なお、活動は2種類「現行サービスの改善策提案型」と「新規サービスの提案型」があります。応募するにあたってどちらに取り組むかまでは決める必要はありませんが、自分の中でこんなことがあったらオモシロイ、とか絶対これがあれば便利、と言ったアイデアをたくさん持って参加することをおすすめします。<br>また、応募はグループ応募と個人応募があります。個人で参加した場合は当日にグループを作ることができるので、問題ありません。ただし、あらかじめ自分の役割を明確にしておくことをおすすめします。</p>
<h2 id="詳細"><a href="#詳細" class="headerlink" title="詳細"></a>詳細</h2><p>この活動の目的は、勝ち取った予算でWebサービスを作り、それを世に発信することです。0を1に、1を10に、全部自分の手で行うことができます。<br>したがって、活動は2段階に分かれます。1段目は予算を取る活動、2段目は提案サービスをカタチにする活動です。<br>前者は参加者全員取り組むことができますが、後者は勝ち取った者のみ取り組むことができます。</p>
<h3 id="予算を取る活動"><a href="#予算を取る活動" class="headerlink" title="予算を取る活動"></a>予算を取る活動</h3><p>予算を取るためには、先進のスタッフの前でめっちゃくちゃ良いプレゼンをして、自分の提案を認めてもらう必要があります。<br>そのため、市場や現行サービスの問題点を含めた状況把握、どれくらいのお金が動くのかor得られそうかを含めたマネタイズ、そして解決策と言った材料が必要になります。<br>そこで本インターンでは、めっちゃくちゃ良いプレゼンをするために、材料を揃えるための方法論を教わります。<br>今回教わったのは<strong>デザインスプリント</strong>です。デザインスプリントの詳細は本記事では割愛しますが、簡単に説明すると、デザインスプリントは仮想の人間を作り、その人に提供する価値を考える方法です。</p>
<p>この活動ではデザインスプリントを通して得られた材料をスライドに反映して、それを発表します。<br>ここで提案が認められると、次のステップへ進むことができます。</p>
<h3 id="提案サービスをカタチにする活動"><a href="#提案サービスをカタチにする活動" class="headerlink" title="提案サービスをカタチにする活動"></a>提案サービスをカタチにする活動</h3><p>ここからはメンター2, 3人の監督の下、提案サービスをカタチにしていきます。<br>活動スタイルですが、基本的には1ヶ月の間グループで自主的に作業し、週1日の頻度で行う局内でのメンターとの会合にて進捗を報告し、また問題点等の共有を行います。なお、状況によっては活動期間が変動する場合があります。<br>活動はグループで行いますが、基本的な作業は個々人の役割に沿って行います。</p>
<p>活動内容の詳細はまだ公開できませんが、ここで言えることは<strong>実に濃い内容の有意義な活動</strong>ができます。</p>
<h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><ul>
<li>実業務に近い提案ができる</li>
<li><ul>
<li>提案をする相手・場はもちろんのこと、発表までの過程と提案が許可されてからそれをカタチにするまでの過程が実際の業務と非常に近いです。また、現場スタッフによるフィードバックを受けられます。</li>
</ul>
</li>
<li>メンターがつく</li>
<li><ul>
<li>先進の現場スタッフが綿密に指導してくれます。今回はSlackを用いることで密なコミュニケーションを図りました。おかげさまで問題を抱え込むことはほとんどありませんでした。</li>
</ul>
</li>
<li>開発リソースを何でも使える</li>
<li><ul>
<li>予算があるため、開発にかかるリソースはほぼ使い放題です。したがって、データ解析, 機械学習等で計算機をガンガン回す作業もできます。</li>
</ul>
</li>
<li>現場を見られる</li>
<li><ul>
<li>局内で現場スタッフの働く様子を見ることができます。また、話せる機会が多く存在します。</li>
</ul>
</li>
<li>Webビジネスの臨場感を味わえる</li>
<li><ul>
<li>テレビ局が行うWebビジネスを話として聞ける場は多く存在しても、それを実際に経験できる場は恐らく他には存在しないでしょう。</li>
</ul>
</li>
<li>開発ノウハウを知れる</li>
<li><ul>
<li>開発の回し方から運用の方法まで、実際に行われている開発のノウハウを多く教わることができました。</li>
</ul>
</li>
</ul>
<h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>本インターンシップは、テレビ放送局の性質上、他業種・他職種の人と関わる機会が多く存在するため、多様な意見をもらいながらWebサービスを作ることができます。技術力はもちろん、考え方の成長も感じられることでしょう。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>9月の下旬からつい1週間くらい前まで、テレビ朝日の総合ビジネス局でインターンシップをしていました。<br>そこで今回は、テレビ朝日のインターンシップについて自分の感想を交えながら説明したいと思います。これで来年多くの応募があれば幸いです。</p>
<hr>
<h2 id="]]>
    </summary>
    
      <category term="インターンシップ" scheme="https://camberbridge.github.io/tags/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%83%E3%83%97/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[アドオンスクリプトから外部WebAPIをたたく]]></title>
    <link href="https://camberbridge.github.io/2015/09/25/%E3%82%A2%E3%83%89%E3%82%AA%E3%83%B3%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%81%8B%E3%82%89%E5%A4%96%E9%83%A8WebAPI%E3%82%92%E3%81%9F%E3%81%9F%E3%81%8F/"/>
    <id>https://camberbridge.github.io/2015/09/25/アドオンスクリプトから外部WebAPIをたたく/</id>
    <published>2015-09-25T13:13:06.000Z</published>
    <updated>2015-09-25T13:37:19.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li>Firefox Add-on のアドオンスクリプトから外部WebAPIをたたくには(クロスドメイン制約やらの問題を配慮して)XMLHTTPRequestではHTTP通信ができなくなっている. </li>
<li><ul>
<li>XMLHTTPRequestがラッパされているAdd-on SDK提供のrequestモジュールを使えばHTTP通信ができる. 下記例.</li>
</ul>
</li>
</ul>
<figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var <span class="built_in">Request</span> = require(<span class="string">"sdk/request"</span>).<span class="built_in">Request</span>;</span><br><span class="line">var quijote = <span class="built_in">Request</span>(&#123;</span><br><span class="line">  url: <span class="string">"URL"</span>,</span><br><span class="line">  overrideMimeType: <span class="string">"text/plain; charset=latin1"</span>,</span><br><span class="line">  onComplete: <span class="keyword">function</span> (<span class="built_in">response</span>) &#123;</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="built_in">response</span>.text);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">quijote.<span class="keyword">get</span>();</span><br></pre></td></tr></table></figure>
<p>– ちなみにレスポンスで受ける文字列が化けるのでcharsetはutf-8にするといい</p>
]]></content>
    <summary type="html">
    <![CDATA[<ul>
<li>Firefox Add-on のアドオンスクリプトから外部WebAPIをたたくには(クロスドメイン制約やらの問題を配慮して)XMLHTTPRequestではHTTP通信ができなくなっている. </li>
<li><ul>
<li>XMLHTTPRequestがラ]]>
    </summary>
    
      <category term="WebAPI" scheme="https://camberbridge.github.io/tags/WebAPI/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[FirefoxAdd-onの開発着手]]></title>
    <link href="https://camberbridge.github.io/2015/08/14/FirefoxAdd-on%E3%81%AE%E9%96%8B%E7%99%BA%E7%9D%80%E6%89%8B/"/>
    <id>https://camberbridge.github.io/2015/08/14/FirefoxAdd-onの開発着手/</id>
    <published>2015-08-14T07:54:48.000Z</published>
    <updated>2015-08-14T08:19:50.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li>Widgetモジュールの使用は非推奨となっていた</li>
<li><ul>
<li>uiモジュールを使うように</li>
</ul>
</li>
<li>モジュールのパス指定はsdk/から始めるように(省略すると実行時にwarningが出る)</li>
</ul>
<p>下記はブラウザのメニューバーにアイコンを追加し, それをクリックすると新しいタブを開いてモジラのページへジャンプするコード</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> buttons = <span class="built_in">require</span>(<span class="string">'sdk/ui/button/action'</span>);</span><br><span class="line"><span class="keyword">var</span> tabs = <span class="built_in">require</span>(<span class="string">"sdk/tabs"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> button = buttons.ActionButton(&#123;</span><br><span class="line">  id: <span class="string">"mozilla-link"</span>,</span><br><span class="line">  label: <span class="string">"Visit Mozilla"</span>,</span><br><span class="line">  icon: &#123;</span><br><span class="line">    <span class="string">"16"</span>: <span class="string">"./icon-16.png"</span>,</span><br><span class="line">    <span class="string">"32"</span>: <span class="string">"./icon-32.png"</span>,</span><br><span class="line">    <span class="string">"64"</span>: <span class="string">"./icon-64.png"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onClick: handleClick</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line">  tabs.open(<span class="string">"https://www.mozilla.org/"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<ul>
<li>Widgetモジュールの使用は非推奨となっていた</li>
<li><ul>
<li>uiモジュールを使うように</li>
</ul>
</li>
<li>モジュールのパス指定はsdk/から始めるように(省略すると実行時にwarningが出る)</li>
</u]]>
    </summary>
    
      <category term="アドオン" scheme="https://camberbridge.github.io/tags/%E3%82%A2%E3%83%89%E3%82%AA%E3%83%B3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Three.jsを使ってみた]]></title>
    <link href="https://camberbridge.github.io/2015/08/10/Three-js%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F/"/>
    <id>https://camberbridge.github.io/2015/08/10/Three-jsを使ってみた/</id>
    <published>2015-08-10T06:24:40.000Z</published>
    <updated>2019-12-16T15:29:35.000Z</updated>
    <content type="html"><![CDATA[<ul>
  <li>Three.jsとは
    WebGLをサポートした3次元CGを描画するためのライブラリ
    取得は<a href="https://github.com/mrdoob/three.js/" target="_blank" rel="noopener">ここ</a>
  </li>
  <li>参考
    <ul>
      <li><a href="http://threejs.org/docs/" target="_blank" rel="noopener">three.js/docs</a></li>
      <li><a href="http://www.yomotsu.net/wp/?p=597" target="_blank" rel="noopener">THREE.jsでWebGL</a></li>
    </ul>
  </li>
</ul>

<h3 id="exe-result">実行結果</h3>
<script>
window.addEventListener("DOMContentLoaded",function(){
    //表示領域の確保(HTMLに)
    let width = "300px";
    let height = "300px";
    let container = document.createElement("div");
    //h3内にdiv生成
    document.getElementById("exe-result").appendChild(container);
    container.style.width = width;
    container.style.height = height;
    //レンダラ生成
    let cWidth = container.offsetWidth;
    let cHeight = container.offsetHeight;
    let renderer = new THREE.WebGLRenderer({alpha: true, antialias: true});
    renderer.setSize(cWidth, cHeight);
    renderer.setClearColor(0xffffff, 1);
    //生成したdiv内にレンダラが持つDOM要素を追加
    container.appendChild(renderer.domElement);
    //シーン生成
    let scene = new THREE.Scene();
    //カメラ生成
    let angle = 20;
    let near = 1;
    let far = 10000;
    let aspect = cWidth/cHeight;
    let camera = new THREE.PerspectiveCamera(angle, aspect, near, far);
    camera.position.set(0, 500, 1000);
    camera.lookAt({x:0, y:0, z:0});
    //表示する物体生成
    let geometry = new THREE.SphereGeometry(150, 20, 20);
    let material = new THREE.MeshBasicMaterial({color: 0x0000ff, wireframe: true});
    let mesh = new THREE.Mesh(geometry, material);
    //シーンに物体追加
    scene.add(mesh);
    //レンダリング
    renderer.render(scene, camera);
    //アニメーション
    let theta = 0;
    let rgbR = 0, rgbG = 0, rgbB = 0;
    let evalR = true, evalG = true, evalB = true;
    let rotate = function(){
        theta += 0.01;
        theta %= 2 * Math.PI;
        mesh.rotation.y = theta;
    if(evalR == true){
      rgbR += 0.01;
    }else if(evalR == false){
      rgbR -= 0.01;
    }
        if(rgbR == 1){
          evalR = false;
        }else if(rgbR == 0){
      evalR = true;
    }
        if(evalG == true){
          rgbG += 0.02;
        }else if(evalG == false){
          rgbG -= 0.02;
        }
        if(rgbG >= 1){
          evalG = false;
        }else if(rgbG <= 0){
          evalG = true;
        }
        if(evalB == true){
          rgbB += 0.03;
        }else if(evalB == false){
          rgbB -= 0.03;
        }
        if(rgbB >= 1){
          evalB = false;
        }else if(rgbB <= 0){
          evalB = true;
        }
        material.color.setRGB(rgbR, rgbG, rgbB);
        renderer.render(scene, camera);
        requestAnimationFrame(rotate);
    };
    rotate();
});
</script>
]]></content>
    <summary type="html">
    <![CDATA[<ul>
  <li>Three.jsとは
    WebGLをサポートした3次元CGを描画するためのライブラリ
    取得は<a href="https://github.com/mrdoob/three.js/" target="_blank" rel="noopener"]]>
    </summary>
    
      <category term="Three.js" scheme="https://camberbridge.github.io/tags/Three-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo始めた]]></title>
    <link href="https://camberbridge.github.io/2015/08/09/Hexo%E5%A7%8B%E3%82%81%E3%81%9F/"/>
    <id>https://camberbridge.github.io/2015/08/09/Hexo始めた/</id>
    <published>2015-08-09T09:46:00.000Z</published>
    <updated>2015-08-10T03:13:26.000Z</updated>
    <content type="html"><![CDATA[<ul>
  <li>hexoとは
  静的サイトジェネレータの1つ
  読み方分からん
  </li>
  <li>シンタックス
  [Qiita](http://qiita.com)のようにシンタックスハイライトされる
  </li>
  <li>手順
    <ol>
      <li> ブログ生成
      <code>$ hexo new "hoge"</code>
      source/_posts 配下に .md ファイルが生成される
      </li>
      <li>ローカル環境でサーバ起動して確認
      <code>$ hexo server</code>
      </li>
      <li>デプロイ
      <code>$ hexo deploy -g</code>
      これは generate の役目も担う
      </li>
    </ol>
  </li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<ul>
  <li>hexoとは
  静的サイトジェネレータの1つ
  読み方分からん
  </li>
  <li>シンタックス
  [Qiita](http://qiita.com)のようにシンタックスハイライトされる
  </li>
  <li>手順
    <ol>
  ]]>
    </summary>
    
      <category term="hexo" scheme="https://camberbridge.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>